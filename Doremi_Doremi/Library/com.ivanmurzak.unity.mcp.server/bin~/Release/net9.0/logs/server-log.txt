2025-06-03 22:22:20.0992 | TRACE | com.IvanMurzak.Unity.MCP.Common.McpRunner | Ctor. 
2025-06-03 22:22:20.1085 | TRACE | com.IvanMurzak.Unity.MCP.Common.McpRunner | Registered tools [0]: 
2025-06-03 22:22:20.1085 | TRACE | com.IvanMurzak.Unity.MCP.Common.McpRunner | Registered resources [0]: 
2025-06-03 22:22:20.1085 | TRACE | com.IvanMurzak.Unity.MCP.Common.McpPlugin | McpPlugin Ctor. Version: 0.7.0 
2025-06-03 22:22:20.3883 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport entering read messages loop for Server (stream) (com.IvanMurzak.Unity.MCP.Server) 
2025-06-03 22:22:20.3883 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport waiting for message for Server (stream) (com.IvanMurzak.Unity.MCP.Server) 
2025-06-03 22:22:20.3883 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport received message for Server (stream) (com.IvanMurzak.Unity.MCP.Server): {"method":"initialize","params":{"protocolVersion":"2024-11-05","capabilities":{},"clientInfo":{"name":"claude-ai","version":"0.1.0"}},"jsonrpc":"2.0","id":0} 
2025-06-03 22:22:20.3883 | TRACE | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport Server (stream) (com.IvanMurzak.Unity.MCP.Server): Message bytes (UTF-8): 7B226D6574686F64223A22696E697469616C697A65222C22706172616D73223A7B2270726F746F636F6C56657273696F6E223A22323032342D31312D3035222C226361706162696C6974696573223A7B7D2C22636C69656E74496E666F223A7B226E616D65223A22636C617564652D6169222C2276657273696F6E223A22302E312E30227D7D2C226A736F6E727063223A22322E30222C226964223A307D 
2025-06-03 22:22:20.4027 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport received message parsed for Server (stream) (com.IvanMurzak.Unity.MCP.Server): 0 
2025-06-03 22:22:20.4027 | TRACE | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Writing message to channel: JsonRpcRequest { JsonRpc = 2.0, Id = 0, Method = initialize, Params = {
  "protocolVersion": "2024-11-05",
  "capabilities": {},
  "clientInfo": {
    "name": "claude-ai",
    "version": "0.1.0"
  }
} } 
2025-06-03 22:22:20.4027 | TRACE | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Message written to channel 
2025-06-03 22:22:20.4027 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport message written for Server (stream) (com.IvanMurzak.Unity.MCP.Server) with ID 0 
2025-06-03 22:22:20.4027 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport waiting for message for Server (stream) (com.IvanMurzak.Unity.MCP.Server) 
2025-06-03 22:22:20.4027 | TRACE | com.IvanMurzak.Unity.MCP.Common.McpRunner | Ctor. 
2025-06-03 22:22:20.4027 | TRACE | com.IvanMurzak.Unity.MCP.Common.McpRunner | Registered tools [0]: 
2025-06-03 22:22:20.4027 | TRACE | com.IvanMurzak.Unity.MCP.Common.McpRunner | Registered resources [0]: 
2025-06-03 22:22:20.4027 | TRACE | com.IvanMurzak.Unity.MCP.Server.RemoteToolRunner | RemoteToolRunner Ctor. 
2025-06-03 22:22:20.4027 | TRACE | com.IvanMurzak.Unity.MCP.Server.RemoteToolRunner | Ctor. 
2025-06-03 22:22:20.4027 | TRACE | com.IvanMurzak.Unity.MCP.Server.McpServerService | McpServerService Ctor. 
2025-06-03 22:22:20.4185 | TRACE | ModelContextProtocol.Server.McpServer | Message read from channel for Server (com.IvanMurzak.Unity.MCP.Server 1.0.0.0) with type JsonRpcRequest 
2025-06-03 22:22:20.4185 | TRACE | com.IvanMurzak.Unity.MCP.Server.McpServerService | McpServerService StartAsync. 
2025-06-03 22:22:20.4185 | INFO  | ModelContextProtocol.Server.McpServer | Request handler called for Server (com.IvanMurzak.Unity.MCP.Server 1.0.0.0) with method initialize 
2025-06-03 22:22:20.4185 | INFO  | ModelContextProtocol.Server.McpServer | Request handler completed for Server (com.IvanMurzak.Unity.MCP.Server 1.0.0.0), Client (claude-ai 0.1.0) with method initialize 
2025-06-03 22:22:20.4185 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport sending message for Server (stream) (com.IvanMurzak.Unity.MCP.Server) with ID 0, JSON (null) 
2025-06-03 22:22:20.4185 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport message sent for Server (stream) (com.IvanMurzak.Unity.MCP.Server) with ID 0 
2025-06-03 22:22:20.4185 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport received message for Server (stream) (com.IvanMurzak.Unity.MCP.Server): {"method":"notifications/initialized","jsonrpc":"2.0"} 
2025-06-03 22:22:20.4185 | TRACE | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport Server (stream) (com.IvanMurzak.Unity.MCP.Server): Message bytes (UTF-8): 7B226D6574686F64223A226E6F74696669636174696F6E732F696E697469616C697A6564222C226A736F6E727063223A22322E30227D 
2025-06-03 22:22:20.4185 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport received message parsed for Server (stream) (com.IvanMurzak.Unity.MCP.Server): (no id) 
2025-06-03 22:22:20.4185 | TRACE | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Writing message to channel: JsonRpcNotification { JsonRpc = 2.0, Method = notifications/initialized, Params =  } 
2025-06-03 22:22:20.4185 | TRACE | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Message written to channel 
2025-06-03 22:22:20.4185 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport message written for Server (stream) (com.IvanMurzak.Unity.MCP.Server) with ID (no id) 
2025-06-03 22:22:20.4185 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport waiting for message for Server (stream) (com.IvanMurzak.Unity.MCP.Server) 
2025-06-03 22:22:20.4185 | TRACE | ModelContextProtocol.Server.McpServer | Message read from channel for Server (com.IvanMurzak.Unity.MCP.Server 1.0.0.0), Client (claude-ai 0.1.0) with type JsonRpcNotification 
2025-06-03 22:22:20.4185 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport received message for Server (stream) (com.IvanMurzak.Unity.MCP.Server): {"method":"tools/list","params":{},"jsonrpc":"2.0","id":1} 
2025-06-03 22:22:20.4185 | TRACE | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport Server (stream) (com.IvanMurzak.Unity.MCP.Server): Message bytes (UTF-8): 7B226D6574686F64223A22746F6F6C732F6C697374222C22706172616D73223A7B7D2C226A736F6E727063223A22322E30222C226964223A317D 
2025-06-03 22:22:20.4185 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport received message parsed for Server (stream) (com.IvanMurzak.Unity.MCP.Server): 1 
2025-06-03 22:22:20.4185 | TRACE | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Writing message to channel: JsonRpcRequest { JsonRpc = 2.0, Id = 1, Method = tools/list, Params = {} } 
2025-06-03 22:22:20.4185 | TRACE | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Message written to channel 
2025-06-03 22:22:20.4185 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport message written for Server (stream) (com.IvanMurzak.Unity.MCP.Server) with ID 1 
2025-06-03 22:22:20.4185 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport waiting for message for Server (stream) (com.IvanMurzak.Unity.MCP.Server) 
2025-06-03 22:22:20.4185 | TRACE | ModelContextProtocol.Server.McpServer | Message read from channel for Server (com.IvanMurzak.Unity.MCP.Server 1.0.0.0), Client (claude-ai 0.1.0) with type JsonRpcRequest 
2025-06-03 22:22:20.4185 | INFO  | ModelContextProtocol.Server.McpServer | Request handler called for Server (com.IvanMurzak.Unity.MCP.Server 1.0.0.0), Client (claude-ai 0.1.0) with method tools/list 
2025-06-03 22:22:20.4185 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport received message for Server (stream) (com.IvanMurzak.Unity.MCP.Server): {"method":"tools/list","params":{},"jsonrpc":"2.0","id":2} 
2025-06-03 22:22:20.4185 | TRACE | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport Server (stream) (com.IvanMurzak.Unity.MCP.Server): Message bytes (UTF-8): 7B226D6574686F64223A22746F6F6C732F6C697374222C22706172616D73223A7B7D2C226A736F6E727063223A22322E30222C226964223A327D 
2025-06-03 22:22:20.4185 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport received message parsed for Server (stream) (com.IvanMurzak.Unity.MCP.Server): 2 
2025-06-03 22:22:20.4185 | TRACE | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Writing message to channel: JsonRpcRequest { JsonRpc = 2.0, Id = 2, Method = tools/list, Params = {} } 
2025-06-03 22:22:20.4185 | TRACE | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Message written to channel 
2025-06-03 22:22:20.4185 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport message written for Server (stream) (com.IvanMurzak.Unity.MCP.Server) with ID 2 
2025-06-03 22:22:20.4185 | TRACE | ModelContextProtocol.Server.McpServer | Message read from channel for Server (com.IvanMurzak.Unity.MCP.Server 1.0.0.0), Client (claude-ai 0.1.0) with type JsonRpcRequest 
2025-06-03 22:22:20.4185 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport waiting for message for Server (stream) (com.IvanMurzak.Unity.MCP.Server) 
2025-06-03 22:22:20.4185 | INFO  | ModelContextProtocol.Server.McpServer | Request handler called for Server (com.IvanMurzak.Unity.MCP.Server 1.0.0.0), Client (claude-ai 0.1.0) with method tools/list 
2025-06-03 22:22:20.4185 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport received message for Server (stream) (com.IvanMurzak.Unity.MCP.Server): {"method":"resources/list","params":{},"jsonrpc":"2.0","id":3} 
2025-06-03 22:22:20.4185 | TRACE | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport Server (stream) (com.IvanMurzak.Unity.MCP.Server): Message bytes (UTF-8): 7B226D6574686F64223A227265736F75726365732F6C697374222C22706172616D73223A7B7D2C226A736F6E727063223A22322E30222C226964223A337D 
2025-06-03 22:22:20.4185 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport received message parsed for Server (stream) (com.IvanMurzak.Unity.MCP.Server): 3 
2025-06-03 22:22:20.4185 | TRACE | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Writing message to channel: JsonRpcRequest { JsonRpc = 2.0, Id = 3, Method = resources/list, Params = {} } 
2025-06-03 22:22:20.4185 | TRACE | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Message written to channel 
2025-06-03 22:22:20.4185 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport message written for Server (stream) (com.IvanMurzak.Unity.MCP.Server) with ID 3 
2025-06-03 22:22:20.4185 | TRACE | ModelContextProtocol.Server.McpServer | Message read from channel for Server (com.IvanMurzak.Unity.MCP.Server 1.0.0.0), Client (claude-ai 0.1.0) with type JsonRpcRequest 
2025-06-03 22:22:20.4185 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport waiting for message for Server (stream) (com.IvanMurzak.Unity.MCP.Server) 
2025-06-03 22:22:20.4185 | TRACE | com.IvanMurzak.Unity.MCP.Server.ToolRouter | ToolRouter.ListAll 
2025-06-03 22:22:20.4185 | TRACE | com.IvanMurzak.Unity.MCP.Server.ToolRouter | ToolRouter.ListAll 
2025-06-03 22:22:20.4340 | TRACE | com.IvanMurzak.Unity.MCP.Server.ToolRouter | Using ToolRunner: RemoteToolRunner 
2025-06-03 22:22:20.4340 | TRACE | com.IvanMurzak.Unity.MCP.Server.ToolRouter | Using ToolRunner: RemoteToolRunner 
2025-06-03 22:22:20.4340 | TRACE | com.IvanMurzak.Unity.MCP.Server.RemoteToolRunner | Invoke '/mcp/run-list-tool': com.IvanMurzak.Unity.MCP.Common.Data.RequestListTool
Available connections:  
2025-06-03 22:22:20.4340 | TRACE | com.IvanMurzak.Unity.MCP.Server.RemoteToolRunner | Invoke '/mcp/run-list-tool': com.IvanMurzak.Unity.MCP.Common.Data.RequestListTool
Available connections:  
2025-06-03 22:22:20.4340 | WARN  | ModelContextProtocol.Server.McpServer | No handler found for request resources/list for server Server (com.IvanMurzak.Unity.MCP.Server 1.0.0.0), Client (claude-ai 0.1.0) 
2025-06-03 22:22:20.4340 | WARN  | com.IvanMurzak.Unity.MCP.Server.RemoteToolRunner | No connected clients. Retrying [1/10]... 
2025-06-03 22:22:20.4340 | WARN  | com.IvanMurzak.Unity.MCP.Server.RemoteToolRunner | No connected clients. Retrying [1/10]... 
2025-06-03 22:22:20.4500 | ERROR | ModelContextProtocol.Server.McpServer | Request handler error for Server (com.IvanMurzak.Unity.MCP.Server 1.0.0.0), Client (claude-ai 0.1.0) with method resources/list ModelContextProtocol.McpException: The method does not exist or is not available.
   at ModelContextProtocol.Shared.McpSession.HandleRequest(JsonRpcRequest request, CancellationToken cancellationToken)
   at ModelContextProtocol.Shared.McpSession.HandleMessageAsync(IJsonRpcMessage message, CancellationToken cancellationToken)
   at ModelContextProtocol.Shared.McpSession.<>c__DisplayClass20_1.<<ProcessMessagesAsync>g__ProcessMessageAsync|0>d.MoveNext()
2025-06-03 22:22:20.4500 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport sending message for Server (stream) (com.IvanMurzak.Unity.MCP.Server) with ID 3, JSON (null) 
2025-06-03 22:22:20.4500 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport message sent for Server (stream) (com.IvanMurzak.Unity.MCP.Server) with ID 3 
2025-06-03 22:22:20.4500 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport received message for Server (stream) (com.IvanMurzak.Unity.MCP.Server): {"method":"prompts/list","params":{},"jsonrpc":"2.0","id":4} 
2025-06-03 22:22:20.4500 | TRACE | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport Server (stream) (com.IvanMurzak.Unity.MCP.Server): Message bytes (UTF-8): 7B226D6574686F64223A2270726F6D7074732F6C697374222C22706172616D73223A7B7D2C226A736F6E727063223A22322E30222C226964223A347D 
2025-06-03 22:22:20.4500 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport received message parsed for Server (stream) (com.IvanMurzak.Unity.MCP.Server): 4 
2025-06-03 22:22:20.4500 | TRACE | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Writing message to channel: JsonRpcRequest { JsonRpc = 2.0, Id = 4, Method = prompts/list, Params = {} } 
2025-06-03 22:22:20.4500 | TRACE | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Message written to channel 
2025-06-03 22:22:20.4500 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport message written for Server (stream) (com.IvanMurzak.Unity.MCP.Server) with ID 4 
2025-06-03 22:22:20.4500 | TRACE | ModelContextProtocol.Server.McpServer | Message read from channel for Server (com.IvanMurzak.Unity.MCP.Server 1.0.0.0), Client (claude-ai 0.1.0) with type JsonRpcRequest 
2025-06-03 22:22:20.4500 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport waiting for message for Server (stream) (com.IvanMurzak.Unity.MCP.Server) 
2025-06-03 22:22:20.4500 | WARN  | ModelContextProtocol.Server.McpServer | No handler found for request prompts/list for server Server (com.IvanMurzak.Unity.MCP.Server 1.0.0.0), Client (claude-ai 0.1.0) 
2025-06-03 22:22:20.4500 | ERROR | ModelContextProtocol.Server.McpServer | Request handler error for Server (com.IvanMurzak.Unity.MCP.Server 1.0.0.0), Client (claude-ai 0.1.0) with method prompts/list ModelContextProtocol.McpException: The method does not exist or is not available.
   at ModelContextProtocol.Shared.McpSession.HandleRequest(JsonRpcRequest request, CancellationToken cancellationToken)
   at ModelContextProtocol.Shared.McpSession.HandleMessageAsync(IJsonRpcMessage message, CancellationToken cancellationToken)
   at ModelContextProtocol.Shared.McpSession.<>c__DisplayClass20_1.<<ProcessMessagesAsync>g__ProcessMessageAsync|0>d.MoveNext()
2025-06-03 22:22:20.4500 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport sending message for Server (stream) (com.IvanMurzak.Unity.MCP.Server) with ID 4, JSON (null) 
2025-06-03 22:22:20.4500 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport message sent for Server (stream) (com.IvanMurzak.Unity.MCP.Server) with ID 4 
2025-06-03 22:22:20.7039 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport received message for Server (stream) (com.IvanMurzak.Unity.MCP.Server): {"method":"tools/list","params":{},"jsonrpc":"2.0","id":5} 
2025-06-03 22:22:20.7039 | TRACE | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport Server (stream) (com.IvanMurzak.Unity.MCP.Server): Message bytes (UTF-8): 7B226D6574686F64223A22746F6F6C732F6C697374222C22706172616D73223A7B7D2C226A736F6E727063223A22322E30222C226964223A357D 
2025-06-03 22:22:20.7039 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport received message parsed for Server (stream) (com.IvanMurzak.Unity.MCP.Server): 5 
2025-06-03 22:22:20.7039 | TRACE | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Writing message to channel: JsonRpcRequest { JsonRpc = 2.0, Id = 5, Method = tools/list, Params = {} } 
2025-06-03 22:22:20.7039 | TRACE | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Message written to channel 
2025-06-03 22:22:20.7039 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport message written for Server (stream) (com.IvanMurzak.Unity.MCP.Server) with ID 5 
2025-06-03 22:22:20.7039 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport waiting for message for Server (stream) (com.IvanMurzak.Unity.MCP.Server) 
2025-06-03 22:22:20.7039 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport received message for Server (stream) (com.IvanMurzak.Unity.MCP.Server): {"method":"tools/list","params":{},"jsonrpc":"2.0","id":6} 
2025-06-03 22:22:20.7039 | TRACE | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport Server (stream) (com.IvanMurzak.Unity.MCP.Server): Message bytes (UTF-8): 7B226D6574686F64223A22746F6F6C732F6C697374222C22706172616D73223A7B7D2C226A736F6E727063223A22322E30222C226964223A367D 
2025-06-03 22:22:20.7039 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport received message parsed for Server (stream) (com.IvanMurzak.Unity.MCP.Server): 6 
2025-06-03 22:22:20.7039 | TRACE | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Writing message to channel: JsonRpcRequest { JsonRpc = 2.0, Id = 6, Method = tools/list, Params = {} } 
2025-06-03 22:22:20.7039 | TRACE | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Message written to channel 
2025-06-03 22:22:20.7039 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport message written for Server (stream) (com.IvanMurzak.Unity.MCP.Server) with ID 6 
2025-06-03 22:22:20.7039 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport waiting for message for Server (stream) (com.IvanMurzak.Unity.MCP.Server) 
2025-06-03 22:22:20.7039 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport received message for Server (stream) (com.IvanMurzak.Unity.MCP.Server): {"method":"resources/list","params":{},"jsonrpc":"2.0","id":7} 
2025-06-03 22:22:20.7039 | TRACE | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport Server (stream) (com.IvanMurzak.Unity.MCP.Server): Message bytes (UTF-8): 7B226D6574686F64223A227265736F75726365732F6C697374222C22706172616D73223A7B7D2C226A736F6E727063223A22322E30222C226964223A377D 
2025-06-03 22:22:20.7039 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport received message parsed for Server (stream) (com.IvanMurzak.Unity.MCP.Server): 7 
2025-06-03 22:22:20.7039 | TRACE | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Writing message to channel: JsonRpcRequest { JsonRpc = 2.0, Id = 7, Method = resources/list, Params = {} } 
2025-06-03 22:22:20.7039 | TRACE | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Message written to channel 
2025-06-03 22:22:20.7039 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport message written for Server (stream) (com.IvanMurzak.Unity.MCP.Server) with ID 7 
2025-06-03 22:22:20.7039 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport waiting for message for Server (stream) (com.IvanMurzak.Unity.MCP.Server) 
2025-06-03 22:22:20.7039 | TRACE | ModelContextProtocol.Server.McpServer | Message read from channel for Server (com.IvanMurzak.Unity.MCP.Server 1.0.0.0), Client (claude-ai 0.1.0) with type JsonRpcRequest 
2025-06-03 22:22:20.7039 | TRACE | ModelContextProtocol.Server.McpServer | Message read from channel for Server (com.IvanMurzak.Unity.MCP.Server 1.0.0.0), Client (claude-ai 0.1.0) with type JsonRpcRequest 
2025-06-03 22:22:20.7039 | TRACE | ModelContextProtocol.Server.McpServer | Message read from channel for Server (com.IvanMurzak.Unity.MCP.Server 1.0.0.0), Client (claude-ai 0.1.0) with type JsonRpcRequest 
2025-06-03 22:22:20.7039 | WARN  | ModelContextProtocol.Server.McpServer | No handler found for request resources/list for server Server (com.IvanMurzak.Unity.MCP.Server 1.0.0.0), Client (claude-ai 0.1.0) 
2025-06-03 22:22:20.7039 | INFO  | ModelContextProtocol.Server.McpServer | Request handler called for Server (com.IvanMurzak.Unity.MCP.Server 1.0.0.0), Client (claude-ai 0.1.0) with method tools/list 
2025-06-03 22:22:20.7039 | TRACE | com.IvanMurzak.Unity.MCP.Server.ToolRouter | ToolRouter.ListAll 
2025-06-03 22:22:20.7039 | TRACE | com.IvanMurzak.Unity.MCP.Server.ToolRouter | Using ToolRunner: RemoteToolRunner 
2025-06-03 22:22:20.7039 | TRACE | com.IvanMurzak.Unity.MCP.Server.RemoteToolRunner | Invoke '/mcp/run-list-tool': com.IvanMurzak.Unity.MCP.Common.Data.RequestListTool
Available connections:  
2025-06-03 22:22:20.7039 | ERROR | ModelContextProtocol.Server.McpServer | Request handler error for Server (com.IvanMurzak.Unity.MCP.Server 1.0.0.0), Client (claude-ai 0.1.0) with method resources/list ModelContextProtocol.McpException: The method does not exist or is not available.
   at ModelContextProtocol.Shared.McpSession.HandleRequest(JsonRpcRequest request, CancellationToken cancellationToken)
   at ModelContextProtocol.Shared.McpSession.HandleMessageAsync(IJsonRpcMessage message, CancellationToken cancellationToken)
   at ModelContextProtocol.Shared.McpSession.<>c__DisplayClass20_1.<<ProcessMessagesAsync>g__ProcessMessageAsync|0>d.MoveNext()
2025-06-03 22:22:20.7039 | INFO  | ModelContextProtocol.Server.McpServer | Request handler called for Server (com.IvanMurzak.Unity.MCP.Server 1.0.0.0), Client (claude-ai 0.1.0) with method tools/list 
2025-06-03 22:22:20.7039 | TRACE | com.IvanMurzak.Unity.MCP.Server.ToolRouter | ToolRouter.ListAll 
2025-06-03 22:22:20.7039 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport sending message for Server (stream) (com.IvanMurzak.Unity.MCP.Server) with ID 7, JSON (null) 
2025-06-03 22:22:20.7039 | TRACE | com.IvanMurzak.Unity.MCP.Server.ToolRouter | Using ToolRunner: RemoteToolRunner 
2025-06-03 22:22:20.7039 | WARN  | com.IvanMurzak.Unity.MCP.Server.RemoteToolRunner | No connected clients. Retrying [1/10]... 
2025-06-03 22:22:20.7039 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport message sent for Server (stream) (com.IvanMurzak.Unity.MCP.Server) with ID 7 
2025-06-03 22:22:20.7039 | TRACE | com.IvanMurzak.Unity.MCP.Server.RemoteToolRunner | Invoke '/mcp/run-list-tool': com.IvanMurzak.Unity.MCP.Common.Data.RequestListTool
Available connections:  
2025-06-03 22:22:20.7039 | WARN  | com.IvanMurzak.Unity.MCP.Server.RemoteToolRunner | No connected clients. Retrying [1/10]... 
2025-06-03 22:22:20.7991 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport received message for Server (stream) (com.IvanMurzak.Unity.MCP.Server): {"method":"prompts/list","params":{},"jsonrpc":"2.0","id":8} 
2025-06-03 22:22:20.7991 | TRACE | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport Server (stream) (com.IvanMurzak.Unity.MCP.Server): Message bytes (UTF-8): 7B226D6574686F64223A2270726F6D7074732F6C697374222C22706172616D73223A7B7D2C226A736F6E727063223A22322E30222C226964223A387D 
2025-06-03 22:22:20.7991 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport received message parsed for Server (stream) (com.IvanMurzak.Unity.MCP.Server): 8 
2025-06-03 22:22:20.7991 | TRACE | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Writing message to channel: JsonRpcRequest { JsonRpc = 2.0, Id = 8, Method = prompts/list, Params = {} } 
2025-06-03 22:22:20.7991 | TRACE | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Message written to channel 
2025-06-03 22:22:20.7991 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport message written for Server (stream) (com.IvanMurzak.Unity.MCP.Server) with ID 8 
2025-06-03 22:22:20.7991 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport waiting for message for Server (stream) (com.IvanMurzak.Unity.MCP.Server) 
2025-06-03 22:22:20.7991 | TRACE | ModelContextProtocol.Server.McpServer | Message read from channel for Server (com.IvanMurzak.Unity.MCP.Server 1.0.0.0), Client (claude-ai 0.1.0) with type JsonRpcRequest 
2025-06-03 22:22:20.7991 | WARN  | ModelContextProtocol.Server.McpServer | No handler found for request prompts/list for server Server (com.IvanMurzak.Unity.MCP.Server 1.0.0.0), Client (claude-ai 0.1.0) 
2025-06-03 22:22:20.7991 | ERROR | ModelContextProtocol.Server.McpServer | Request handler error for Server (com.IvanMurzak.Unity.MCP.Server 1.0.0.0), Client (claude-ai 0.1.0) with method prompts/list ModelContextProtocol.McpException: The method does not exist or is not available.
   at ModelContextProtocol.Shared.McpSession.HandleRequest(JsonRpcRequest request, CancellationToken cancellationToken)
   at ModelContextProtocol.Shared.McpSession.HandleMessageAsync(IJsonRpcMessage message, CancellationToken cancellationToken)
   at ModelContextProtocol.Shared.McpSession.<>c__DisplayClass20_1.<<ProcessMessagesAsync>g__ProcessMessageAsync|0>d.MoveNext()
2025-06-03 22:22:20.7991 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport sending message for Server (stream) (com.IvanMurzak.Unity.MCP.Server) with ID 8, JSON (null) 
2025-06-03 22:22:20.7991 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport message sent for Server (stream) (com.IvanMurzak.Unity.MCP.Server) with ID 8 
2025-06-03 22:22:21.4445 | WARN  | com.IvanMurzak.Unity.MCP.Server.RemoteToolRunner | No connected clients. Retrying [2/10]... 
2025-06-03 22:22:21.4445 | WARN  | com.IvanMurzak.Unity.MCP.Server.RemoteToolRunner | No connected clients. Retrying [2/10]... 
2025-06-03 22:22:21.7208 | WARN  | com.IvanMurzak.Unity.MCP.Server.RemoteToolRunner | No connected clients. Retrying [2/10]... 
2025-06-03 22:22:21.7208 | WARN  | com.IvanMurzak.Unity.MCP.Server.RemoteToolRunner | No connected clients. Retrying [2/10]... 
2025-06-03 22:22:22.4524 | WARN  | com.IvanMurzak.Unity.MCP.Server.RemoteToolRunner | No connected clients. Retrying [3/10]... 
2025-06-03 22:22:22.4524 | WARN  | com.IvanMurzak.Unity.MCP.Server.RemoteToolRunner | No connected clients. Retrying [3/10]... 
2025-06-03 22:22:22.7322 | WARN  | com.IvanMurzak.Unity.MCP.Server.RemoteToolRunner | No connected clients. Retrying [3/10]... 
2025-06-03 22:22:22.7322 | WARN  | com.IvanMurzak.Unity.MCP.Server.RemoteToolRunner | No connected clients. Retrying [3/10]... 
2025-06-03 22:22:22.9538 | DEBUG | com.IvanMurzak.Unity.MCP.Server.Program | Request: POST /mcp/remote-app/negotiate 
2025-06-03 22:22:22.9538 | DEBUG | com.IvanMurzak.Unity.MCP.Server.Program | Response: 200 
2025-06-03 22:22:22.9852 | DEBUG | com.IvanMurzak.Unity.MCP.Server.Program | Request: GET /mcp/remote-app 
2025-06-03 22:22:23.0302 | TRACE | com.IvanMurzak.Unity.MCP.Server.RemoteApp | c4b69bc6-9c66-4185-bc28-1f143875ba7d Ctor. 
2025-06-03 22:22:23.0302 | INFO  | com.IvanMurzak.Unity.MCP.Server.RemoteApp | Client 'SHMN8ggbG6281R2igOxy6Q' connected to RemoteApp. Total connected clients: 1 
2025-06-03 22:22:23.1387 | TRACE | com.IvanMurzak.Unity.MCP.Server.RemoteApp | 2b70b7dc-5eff-44f7-b9f5-30651dd25dba Ctor. 
2025-06-03 22:22:23.1387 | TRACE | com.IvanMurzak.Unity.MCP.Server.RemoteApp | RemoteApp OnListToolsUpdated. 2b70b7dc-5eff-44f7-b9f5-30651dd25dba. Data:  
2025-06-03 22:22:23.1387 | TRACE | com.IvanMurzak.Unity.MCP.Server.McpServerService | McpServerService OnListToolUpdated 
2025-06-03 22:22:23.1387 | DEBUG | ModelContextProtocol.Server.McpServer | Sending message to Server (com.IvanMurzak.Unity.MCP.Server 1.0.0.0), Client (claude-ai 0.1.0): {"jsonrpc":"2.0","method":"notifications/tools/list_changed"} 
2025-06-03 22:22:23.1387 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport sending message for Server (stream) (com.IvanMurzak.Unity.MCP.Server) with ID (no id), JSON (null) 
2025-06-03 22:22:23.1387 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport message sent for Server (stream) (com.IvanMurzak.Unity.MCP.Server) with ID (no id) 
2025-06-03 22:22:23.4622 | TRACE | com.IvanMurzak.Unity.MCP.Server.RemoteToolRunner | Invoke '/mcp/run-list-tool', ConnectionId ='SHMN8ggbG6281R2igOxy6Q'. RequestData:
com.IvanMurzak.Unity.MCP.Common.Data.RequestListTool
SHMN8ggbG6281R2igOxy6Q 
2025-06-03 22:22:23.4622 | TRACE | com.IvanMurzak.Unity.MCP.Server.RemoteToolRunner | Invoke '/mcp/run-list-tool', ConnectionId ='SHMN8ggbG6281R2igOxy6Q'. RequestData:
com.IvanMurzak.Unity.MCP.Common.Data.RequestListTool
SHMN8ggbG6281R2igOxy6Q 
2025-06-03 22:22:23.5034 | TRACE | com.IvanMurzak.Unity.MCP.Server.ToolRouter | ListAll, result: {
  "tools": [
    {
      "name": "Assets_Copy",
      "description": "Copy the asset at path and stores it at newPath. Does AssetDatabase.Refresh() at the end.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "sourcePaths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The paths of the asset to copy."
          },
          "destinationPaths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The paths to store the copied asset."
          }
        },
        "required": [
          "sourcePaths",
          "destinationPaths"
        ]
      }
    },
    {
      "name": "Assets_CreateFolders",
      "description": "Create folders at specific locations in the project.\nUse it to organize scripts and assets in the project. Does AssetDatabase.Refresh() at the end.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "paths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The paths for the folders to create."
          }
        },
        "required": [
          "paths"
        ]
      }
    },
    {
      "name": "Assets_Delete",
      "description": "Delete the assets at paths from the project. Does AssetDatabase.Refresh() at the end.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "paths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The paths of the assets"
          }
        },
        "required": [
          "paths"
        ]
      }
    },
    {
      "name": "Assets_Find",
      "description": "Search the asset database using the search filter string.\nAvailable types:\nt:AnimationClip\nt:AudioClip\nt:AudioMixer\nt:ComputeShader\nt:Font\nt:GUISkin\nt:Material\nt:Mesh\nt:Model\nt:PhysicMaterial\nt:Prefab\nt:Scene\nt:Script\nt:Shader\nt:Sprite\nt:Texture\nt:VideoClip\nt:VisualEffectAsset\nt:VisualEffectSubgraph",
      "inputSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "description": "Searching filter. Could be empty.\nName: Filter assets by their filename (without extension). Words separated by whitespace are treated as separate name searches. For example, \u0027test asset\u0027 is a name of an Asset which will be searched for. Note that the name can be used to identify an asset. Further, the name used in the filter string can be specified as a subsection. For example, the \u0027test asset\u0027 example above can be matched using \u0027test\u0027.\nLabels (l:): Assets can have labels attached to them. Assets with particular labels can be found using the keyword \u0027l:\u0027 before each label. This indicates that the string is searching for labels.\nTypes (t:): Find assets based on explicitly identified types. The keyword \u0027t:\u0027 is used as a way to specify that typed assets are being looked for. If more than one type is included in the filter string, then assets that match one class will be returned. Types can either be built-in types such as Texture2D or user-created script classes. User-created classes are assets created from a ScriptableObject class in the project. If all assets are wanted, use Object as all assets derive from Object. Specifying one or more folders using the searchInFolders argument will limit the searching to these folders and their child folders. This is faster than searching all assets in all folders.\nAssetBundles (b:): Find assets which are part of an Asset bundle. The keyword \u0027b:\u0027 is used to determine that Asset bundle names should be part of the query.\nArea (a:): Find assets in a specific area of a project. Valid values are \u0027all\u0027, \u0027assets\u0027, and \u0027packages\u0027. Use this to make your query more specific using the \u0027a:\u0027 keyword followed by the area name to speed up searching.\nGlobbing (glob:): Use globbing to match specific rules. The keyword \u0027glob:\u0027 is followed by the query. For example, \u0027glob:Editor\u0027 will find all Editor folders in a project, \u0027glob:(Editor|Resources)\u0027 will find all Editor and Resources folders in a project, \u0027glob:Editor/*\u0027 will return all Assets inside Editor folders in a project, while \u0027glob:Editor/**\u0027 will return all Assets within Editor folders recursively.\n\nNote:\nSearching is case insensitive."
          },
          "searchInFolders": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The folders where the search will start. If null, the search will be performed in all folders."
          }
        },
        "required": []
      }
    },
    {
      "name": "Assets_Material_Create",
      "description": "Create new material asset with default parameters. Right \u0027shaderName\u0027 should be set. To find the shader, use \u0027Shader.Find\u0027 method.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "assetPath": {
            "type": "string",
            "description": "Asset path. Starts with \u0027Assets/\u0027. Ends with \u0027.mat\u0027."
          },
          "shaderName": {
            "type": "string",
            "description": "Name of the shader that need to be used to create the material."
          }
        },
        "required": [
          "assetPath",
          "shaderName"
        ]
      }
    },
    {
      "name": "Assets_Modify",
      "description": "Modify asset in the project. Not allowed to modify asset in \u0027Packages/\u0027 folder. Please modify it in \u0027Assets/\u0027 folder.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "content": {
            "type": "object",
            "properties": {
              "typeName": {
                "type": "string",
                "description": "Full type name. Eg: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.Vector3\u0027, etc."
              },
              "name": {
                "type": "string"
              },
              "value": {
                "type": "object"
              },
              "fields": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "typeName": {
                      "type": "string",
                      "description": "Full type name. Eg: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.Vector3\u0027, etc."
                    },
                    "name": {
                      "type": "string"
                    },
                    "value": {
                      "type": "object"
                    },
                    "fields": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "props": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  },
                  "required": [
                    "typeName",
                    "name",
                    "value"
                  ]
                }
              },
              "props": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "typeName": {
                      "type": "string",
                      "description": "Full type name. Eg: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.Vector3\u0027, etc."
                    },
                    "name": {
                      "type": "string"
                    },
                    "value": {
                      "type": "object"
                    },
                    "fields": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "props": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  },
                  "required": [
                    "typeName",
                    "name",
                    "value"
                  ]
                }
              }
            },
            "required": [
              "typeName",
              "value"
            ],
            "description": "The asset content. It overrides the existing asset content."
          },
          "assetPath": {
            "type": "string",
            "description": "Path to the asset. See \u0027Assets_Search\u0027 for more details. Starts with \u0027Assets/\u0027. Priority: 1. (Recommended)"
          },
          "assetGuid": {
            "type": "string",
            "description": "GUID of the asset. Priority: 2."
          }
        },
        "required": [
          "content"
        ]
      }
    },
    {
      "name": "Assets_Move",
      "description": "Move the assets at paths in the project. Should be used for asset rename. Does AssetDatabase.Refresh() at the end.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "sourcePaths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The paths of the assets to move."
          },
          "destinationPaths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The paths of moved assets."
          }
        },
        "required": [
          "sourcePaths",
          "destinationPaths"
        ]
      }
    },
    {
      "name": "Assets_Read",
      "description": "Read file asset in the project.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "assetPath": {
            "type": "string",
            "description": "Path to the asset. See \u0027Assets_Search\u0027 for more details. Starts with \u0027Assets/\u0027. Priority: 1. (Recommended)"
          },
          "assetGuid": {
            "type": "string",
            "description": "GUID of the asset. Priority: 2."
          }
        },
        "required": []
      }
    },
    {
      "name": "Assets_Refresh",
      "description": "Refreshes the AssetDatabase. Use it if any new files were added or updated in the project outside of Unity API.\nDon\u0027t need to call it for Scripts manipulations.\nIt also triggers scripts recompilation if any changes in \u0027.cs\u0027 files.",
      "inputSchema": {
        "type": "object"
      }
    },
    {
      "name": "Assets_Prefab_Close",
      "description": "Close a prefab. Use it when you are in prefab editing mode in Unity Editor.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "save": {
            "type": "boolean",
            "description": "True to save prefab. False to discard changes."
          }
        },
        "required": []
      }
    },
    {
      "name": "Assets_Prefab_Create",
      "description": "Create a prefab from a GameObject in a scene. The prefab will be saved in the project assets at the specified path.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "prefabAssetPath": {
            "type": "string",
            "description": "Prefab asset path. Should be in the format \u0027Assets/Path/To/Prefab.prefab\u0027."
          },
          "instanceID": {
            "type": "integer",
            "description": "\u0027instanceID\u0027 of GameObject in a scene."
          },
          "replaceGameObjectWithPrefab": {
            "type": "boolean",
            "description": "If true, the prefab will replace the GameObject in the scene."
          }
        },
        "required": [
          "prefabAssetPath",
          "instanceID"
        ]
      }
    },
    {
      "name": "Assets_Prefab_Instantiate",
      "description": "Instantiates prefab in a scene.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "prefabAssetPath": {
            "type": "string",
            "description": "Prefab asset path."
          },
          "gameObjectPath": {
            "type": "string",
            "description": "GameObject path in the current active scene."
          },
          "position": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number"
              },
              "y": {
                "type": "number"
              },
              "z": {
                "type": "number"
              }
            },
            "required": [
              "x",
              "y",
              "z"
            ],
            "description": "Transform position of the GameObject."
          },
          "rotation": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number"
              },
              "y": {
                "type": "number"
              },
              "z": {
                "type": "number"
              }
            },
            "required": [
              "x",
              "y",
              "z"
            ],
            "description": "Transform rotation of the GameObject. Euler angles in degrees."
          },
          "scale": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number"
              },
              "y": {
                "type": "number"
              },
              "z": {
                "type": "number"
              }
            },
            "required": [
              "x",
              "y",
              "z"
            ],
            "description": "Transform scale of the GameObject."
          },
          "isLocalSpace": {
            "type": "boolean",
            "description": "World or Local space of transform."
          }
        },
        "required": [
          "prefabAssetPath",
          "gameObjectPath"
        ]
      }
    },
    {
      "name": "Assets_Prefab_Open",
      "description": "Open a prefab. There are two options to open prefab:\n1. Open prefab from asset using \u0027prefabAssetPath\u0027.\n2. Open prefab from GameObject in loaded scene using \u0027instanceID\u0027 of the GameObject.\n   The GameObject should be connected to a prefab.\n\nNote: Please \u0027Close\u0027 the prefab later to exit prefab editing mode.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "instanceID": {
            "type": "integer",
            "description": "\u0027instanceID\u0027 of GameObject in a scene."
          },
          "prefabAssetPath": {
            "type": "string",
            "description": "Prefab asset path. Should be in the format \u0027Assets/Path/To/Prefab.prefab\u0027."
          }
        },
        "required": []
      }
    },
    {
      "name": "Assets_Prefab_Read",
      "description": "Read a prefab content. Use it for get started with prefab editing. There are two options to open prefab:\n1. Read prefab from asset using \u0027prefabAssetPath\u0027.\n2. Read prefab from GameObject in loaded scene using \u0027instanceID\u0027 of the GameObject.\n   The GameObject should be connected to a prefab.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "instanceID": {
            "type": "integer",
            "description": "\u0027instanceID\u0027 of GameObject in a scene."
          },
          "prefabAssetPath": {
            "type": "string",
            "description": "Prefab asset path. Should be in the format \u0027Assets/Path/To/Prefab.prefab\u0027."
          },
          "includeChildrenDepth": {
            "type": "integer",
            "description": "Determines the depth of the hierarchy to include. 0 - means only the target GameObject. 1 - means to include one layer below."
          }
        },
        "required": []
      }
    },
    {
      "name": "Assets_Prefab_Save",
      "description": "Save a prefab. Use it when you are in prefab editing mode in Unity Editor.",
      "inputSchema": {
        "type": "object"
      }
    },
    {
      "name": "Assets_Shader_ListAll",
      "description": "Scans the project assets to find all shaders and to get the name from each of them. Returns the list of shader names.",
      "inputSchema": {
        "type": "object"
      }
    },
    {
      "name": "Component_GetAll",
      "description": "Returns the list of all available components in the project.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "search": {
            "type": "string",
            "description": "Substring for searching components. Could be empty."
          }
        },
        "required": []
      }
    },
    {
      "name": "Editor_GetApplicationInformation",
      "description": "Returns list of available information about \u0027UnityEditor.EditorApplication\u0027.\nUse it to get information about the current state of the Unity Editor application. Such as: playmode, paused state, compilation state, etc.\nEditorApplication.isPlaying - Whether the Editor is in Play mode.\nEditorApplication.isPaused - Whether the Editor is paused.\nEditorApplication.isCompiling - Is editor currently compiling scripts? (Read Only)\nEditorApplication.isPlayingOrWillChangePlaymode - Editor application state which is true only when the Editor is currently in or about to enter Play mode. (Read Only)\nEditorApplication.isUpdating - True if the Editor is currently refreshing the AssetDatabase. (Read Only)\nEditorApplication.applicationContentsPath - Path to the Unity editor contents folder. (Read Only)\nEditorApplication.applicationPath - Gets the path to the Unity Editor application. (Read Only)\nEditorApplication.timeSinceStartup - The time since the editor was started. (Read Only)",
      "inputSchema": {
        "type": "object"
      }
    },
    {
      "name": "Editor_SetApplicationState",
      "description": "Control the Unity Editor application state. You can start, stop, or pause the \u0027playmode\u0027.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "isPlaying": {
            "type": "boolean",
            "description": "If true, the \u0027playmode\u0027 will be started. If false, the \u0027playmode\u0027 will be stopped."
          },
          "isPaused": {
            "type": "boolean",
            "description": "If true, the \u0027playmode\u0027 will be paused. If false, the \u0027playmode\u0027 will be resumed."
          }
        },
        "required": []
      }
    },
    {
      "name": "Editor_Selection_Get",
      "description": "\u0027UnityEditor.Selection\u0027. Access to the selection in the editor.\nUse it to get information about selected Assets or GameObjects in a scene.\nSelection.transforms - Returns the top level selection instanceIDs, excluding Prefabs.\nSelection.instanceIDs - The actual unfiltered selection from the Scene returned as instance ids instead of objects.\nSelection.gameObjects - Returns the actual game object selection. Includes Prefabs, non-modifiable objects. (Read Only)\nSelection.assetGUIDs - Returns the guids of the selected assets. (Read Only)\nSelection.activeGameObject - Returns the active game object. (The one shown in the inspector). (Read Only)\nSelection.activeInstanceID - Returns the instanceID of the actual object selection. Includes Prefabs, non-modifiable objects.\nSelection.activeObject - Returns the actual object selection. Includes Prefabs, non-modifiable objects.\nSelection.activeTransform - Returns the active transform. (The one shown in the inspector).",
      "inputSchema": {
        "type": "object"
      }
    },
    {
      "name": "Editor_Selection_Set",
      "description": "\u0027UnityEditor.Selection\u0027. Access to the selection in the editor.\nUse it to select Assets or GameObjects in a scene. Set empty array to clear selection.\nSelection.instanceIDs - The actual unfiltered selection from the Scene returned as instance ids.\nSelection.activeInstanceID -  The \u0027instanceID\u0027 of the actual object selection. Includes Prefabs, non-modifiable objects.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "instanceIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The \u0027instanceID\u0027 array of the target GameObjects."
          },
          "activeInstanceID": {
            "type": "integer",
            "description": "The \u0027instanceID\u0027 of the target Object."
          }
        },
        "required": []
      }
    },
    {
      "name": "GameObject_AddComponent",
      "description": "Add a component to a GameObject.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "componentNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Full name of the Component. It should include full namespace path and the class name."
          },
          "gameObjectRef": {
            "type": "object",
            "properties": {
              "instanceID": {
                "type": "integer"
              },
              "path": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "GameObject reference. Used to find GameObject in opened Prefab or in a Scene.\nUse one of the following properties:\n1. \u0027instanceID\u0027 (int) - recommended. It finds the exact GameObject.\n2. \u0027path\u0027 (string) - finds GameObject by path. It may find a wrong GameObject.\n3. \u0027name\u0027 (string) - finds GameObject by name. It may find a wrong GameObject."
          }
        },
        "required": [
          "componentNames",
          "gameObjectRef"
        ]
      }
    },
    {
      "name": "GameObject_Create",
      "description": "Create a new GameObject at specific path.\nif needed - provide proper \u0027position\u0027, \u0027rotation\u0027 and \u0027scale\u0027 to reduce amount of operations.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the new GameObject."
          },
          "parentGameObjectRef": {
            "type": "object",
            "properties": {
              "instanceID": {
                "type": "integer"
              },
              "path": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "GameObject reference. Used to find GameObject in opened Prefab or in a Scene.\nUse one of the following properties:\n1. \u0027instanceID\u0027 (int) - recommended. It finds the exact GameObject.\n2. \u0027path\u0027 (string) - finds GameObject by path. It may find a wrong GameObject.\n3. \u0027name\u0027 (string) - finds GameObject by name. It may find a wrong GameObject."
          },
          "position": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number"
              },
              "y": {
                "type": "number"
              },
              "z": {
                "type": "number"
              }
            },
            "required": [
              "x",
              "y",
              "z"
            ],
            "description": "Transform position of the GameObject."
          },
          "rotation": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number"
              },
              "y": {
                "type": "number"
              },
              "z": {
                "type": "number"
              }
            },
            "required": [
              "x",
              "y",
              "z"
            ],
            "description": "Transform rotation of the GameObject. Euler angles in degrees."
          },
          "scale": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number"
              },
              "y": {
                "type": "number"
              },
              "z": {
                "type": "number"
              }
            },
            "required": [
              "x",
              "y",
              "z"
            ],
            "description": "Transform scale of the GameObject."
          },
          "isLocalSpace": {
            "type": "boolean",
            "description": "World or Local space of transform."
          },
          "primitiveType": {
            "type": "integer",
            "description": "-1 - No primitive type; 0 - Cube; 1 - Sphere; 2 - Capsule; 3 - Cylinder; 4 - Plane; 5 - Quad."
          }
        },
        "required": [
          "name"
        ]
      }
    },
    {
      "name": "GameObject_Destroy",
      "description": "Destroy a GameObject and all nested GameObjects recursively.\nUse \u0027instanceID\u0027 whenever possible, because it finds the exact GameObject, when \u0027path\u0027 may find a wrong one.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "gameObjectRef": {
            "type": "object",
            "properties": {
              "instanceID": {
                "type": "integer"
              },
              "path": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "GameObject reference. Used to find GameObject in opened Prefab or in a Scene.\nUse one of the following properties:\n1. \u0027instanceID\u0027 (int) - recommended. It finds the exact GameObject.\n2. \u0027path\u0027 (string) - finds GameObject by path. It may find a wrong GameObject.\n3. \u0027name\u0027 (string) - finds GameObject by name. It may find a wrong GameObject."
          }
        },
        "required": [
          "gameObjectRef"
        ]
      }
    },
    {
      "name": "GameObject_DestroyComponents",
      "description": "Destroy one or many components from target GameObject.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "gameObjectRef": {
            "type": "object",
            "properties": {
              "instanceID": {
                "type": "integer"
              },
              "path": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "GameObject reference. Used to find GameObject in opened Prefab or in a Scene.\nUse one of the following properties:\n1. \u0027instanceID\u0027 (int) - recommended. It finds the exact GameObject.\n2. \u0027path\u0027 (string) - finds GameObject by path. It may find a wrong GameObject.\n3. \u0027name\u0027 (string) - finds GameObject by name. It may find a wrong GameObject."
          },
          "destroyComponentRefs": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "instanceID": {
                  "type": "integer"
                },
                "index": {
                  "type": "integer"
                },
                "typeName": {
                  "type": "string"
                }
              }
            },
            "description": "Component reference. Used to find Component at GameObject.\nUse one of the following properties:\n1. \u0027instanceID\u0027 (int) - recommended. It finds the exact Component. Default value is 0.\n2. \u0027index\u0027 (int) - finds Component by index. It may find a wrong Component. Default value is -1.\n3. \u0027name\u0027 (string) - finds Component by name. It may find a wrong Component. Default value is null."
          }
        },
        "required": [
          "gameObjectRef",
          "destroyComponentRefs"
        ]
      }
    },
    {
      "name": "GameObject_Duplicate",
      "description": "Duplicate GameObjects in opened Prefab or in a Scene.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "gameObjectRefs": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "instanceID": {
                  "type": "integer"
                },
                "path": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            },
            "description": "GameObject references. Used to specify GameObjects in opened Prefab or in a Scene.\nUse one of the following properties:\n1. \u0027instanceID\u0027 (int) - recommended. It finds the exact GameObject.\n2. \u0027path\u0027 (string) - finds GameObject by path. It may find a wrong GameObject.\n3. \u0027name\u0027 (string) - finds GameObject by name. It may find a wrong GameObject."
          }
        },
        "required": [
          "gameObjectRefs"
        ]
      }
    },
    {
      "name": "GameObject_Find",
      "description": "Finds specific GameObject by provided information.\nFirst it looks for the opened Prefab, if any Prefab is opened it looks only there ignoring a scene.\nIf no opened Prefab it looks into current active scene.\nReturns GameObject information and its children.\nAlso, it returns Components preview just for the target GameObject.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "gameObjectRef": {
            "type": "object",
            "properties": {
              "instanceID": {
                "type": "integer"
              },
              "path": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "GameObject reference. Used to find GameObject in opened Prefab or in a Scene.\nUse one of the following properties:\n1. \u0027instanceID\u0027 (int) - recommended. It finds the exact GameObject.\n2. \u0027path\u0027 (string) - finds GameObject by path. It may find a wrong GameObject.\n3. \u0027name\u0027 (string) - finds GameObject by name. It may find a wrong GameObject."
          },
          "includeChildrenDepth": {
            "type": "integer",
            "description": "Determines the depth of the hierarchy to include. 0 - means only the target GameObject. 1 - means to include one layer below."
          },
          "briefData": {
            "type": "boolean",
            "description": "If true, it will print only brief data of the target GameObject."
          }
        },
        "required": [
          "gameObjectRef"
        ]
      }
    },
    {
      "name": "GameObject_Modify",
      "description": "Modify GameObjects and/or attached component\u0027s field and properties.\nYou can modify multiple GameObjects at once. Just provide the same number of GameObject references and SerializedMember objects.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "gameObjectDiffs": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "typeName": {
                  "type": "string",
                  "description": "Full type name. Eg: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.Vector3\u0027, etc."
                },
                "name": {
                  "type": "string"
                },
                "value": {
                  "type": "object"
                },
                "fields": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "typeName": {
                        "type": "string",
                        "description": "Full type name. Eg: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.Vector3\u0027, etc."
                      },
                      "name": {
                        "type": "string"
                      },
                      "value": {
                        "type": "object"
                      },
                      "fields": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      },
                      "props": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "required": [
                      "typeName",
                      "name",
                      "value"
                    ]
                  }
                },
                "props": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "typeName": {
                        "type": "string",
                        "description": "Full type name. Eg: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.Vector3\u0027, etc."
                      },
                      "name": {
                        "type": "string"
                      },
                      "value": {
                        "type": "object"
                      },
                      "fields": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      },
                      "props": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "required": [
                      "typeName",
                      "name",
                      "value"
                    ]
                  }
                }
              },
              "required": [
                "typeName",
                "value"
              ]
            },
            "description": "Json Object with required readonly \u0027instanceID\u0027 and \u0027type\u0027 fields.\nEach field and property requires to have \u0027type\u0027 and \u0027name\u0027 fields to identify the exact modification target.\nFollow the object schema to specify what to change, ignore values that should not be modified. Keep the original data structure.\nAny unknown or wrong located fields and properties will be ignored.\nCheck the result of this command to see what was changed. The ignored fields and properties will be listed."
          },
          "gameObjectRefs": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "instanceID": {
                  "type": "integer"
                },
                "path": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            },
            "description": "GameObject references. Used to specify GameObjects in opened Prefab or in a Scene.\nUse one of the following properties:\n1. \u0027instanceID\u0027 (int) - recommended. It finds the exact GameObject.\n2. \u0027path\u0027 (string) - finds GameObject by path. It may find a wrong GameObject.\n3. \u0027name\u0027 (string) - finds GameObject by name. It may find a wrong GameObject."
          }
        },
        "required": [
          "gameObjectDiffs",
          "gameObjectRefs"
        ]
      }
    },
    {
      "name": "GameObject_SetParent",
      "description": "Set GameObjects in opened Prefab or in a Scene by \u0027instanceID\u0027 (int) array.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "gameObjectRefs": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "instanceID": {
                  "type": "integer"
                },
                "path": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            },
            "description": "GameObject references. Used to specify GameObjects in opened Prefab or in a Scene.\nUse one of the following properties:\n1. \u0027instanceID\u0027 (int) - recommended. It finds the exact GameObject.\n2. \u0027path\u0027 (string) - finds GameObject by path. It may find a wrong GameObject.\n3. \u0027name\u0027 (string) - finds GameObject by name. It may find a wrong GameObject."
          },
          "parentGameObjectRef": {
            "type": "object",
            "properties": {
              "instanceID": {
                "type": "integer"
              },
              "path": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "GameObject reference. Used to find GameObject in opened Prefab or in a Scene.\nUse one of the following properties:\n1. \u0027instanceID\u0027 (int) - recommended. It finds the exact GameObject.\n2. \u0027path\u0027 (string) - finds GameObject by path. It may find a wrong GameObject.\n3. \u0027name\u0027 (string) - finds GameObject by name. It may find a wrong GameObject."
          },
          "worldPositionStays": {
            "type": "boolean",
            "description": "A boolean flag indicating whether the GameObject\u0027s world position should remain unchanged when setting its parent."
          }
        },
        "required": [
          "gameObjectRefs",
          "parentGameObjectRef"
        ]
      }
    },
    {
      "name": "Reflection_MethodCall",
      "description": "Call C# method. Any method could be called, even private methods.\nIt requires to receive proper method schema.\nUse \u0027Reflection_MethodFind\u0027 to find available method before using it.\nReceives input parameters and returns result.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "object",
            "properties": {
              "namespace": {
                "type": "string"
              },
              "typeName": {
                "type": "string"
              },
              "methodName": {
                "type": "string"
              },
              "inputParameters": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "typeName": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Method reference. Used to find method in codebase of the project.\n\u0027namespace\u0027 (string) - namespace of the class. It may be empty if the class is in the global namespace or the namespace is unknown.\n\u0027typeName\u0027 (string) - class name. Or substring of the class name.\n\u0027methodName\u0027 (string) - method name. Or substring of the method name.\n\u0027inputParameters\u0027 (List\u003CParameter\u003E) - list of parameters. Each parameter is represented by a \u0027Parameter\u0027 object.\n\n\u0027Parameter\u0027 object contains two fields:\n\u0027typeName\u0027 (string) - type of the parameter including namespace. Sample: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.GameObject\u0027, etc.\n\u0027name\u0027 (string) - name of the parameter. It may be empty if the name is unknown."
          },
          "knownNamespace": {
            "type": "boolean",
            "description": "Set to true if \u0027Namespace\u0027 is known and full namespace name is specified in the \u0027filter.Namespace\u0027 property. Otherwise, set to false."
          },
          "typeNameMatchLevel": {
            "type": "integer",
            "description": "Minimal match level for \u0027typeName\u0027.\n0 - ignore \u0027filter.typeName\u0027,\n1 - contains ignoring case (default value),\n2 - contains case sensitive,\n3 - starts with ignoring case,\n4 - starts with case sensitive,\n5 - equals ignoring case,\n6 - equals case sensitive."
          },
          "methodNameMatchLevel": {
            "type": "integer",
            "description": "Minimal match level for \u0027MethodName\u0027.\n0 - ignore \u0027filter.MethodName\u0027,\n1 - contains ignoring case (default value),\n2 - contains case sensitive,\n3 - starts with ignoring case,\n4 - starts with case sensitive,\n5 - equals ignoring case,\n6 - equals case sensitive."
          },
          "parametersMatchLevel": {
            "type": "integer",
            "description": "Minimal match level for \u0027Parameters\u0027.\n0 - ignore \u0027filter.Parameters\u0027,\n1 - parameters count is the same,\n2 - equals (default value)."
          },
          "targetObject": {
            "type": "object",
            "properties": {
              "typeName": {
                "type": "string",
                "description": "Full type name. Eg: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.Vector3\u0027, etc."
              },
              "name": {
                "type": "string"
              },
              "value": {
                "type": "object"
              },
              "fields": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "typeName": {
                      "type": "string",
                      "description": "Full type name. Eg: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.Vector3\u0027, etc."
                    },
                    "name": {
                      "type": "string"
                    },
                    "value": {
                      "type": "object"
                    },
                    "fields": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "props": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  },
                  "required": [
                    "typeName",
                    "name",
                    "value"
                  ]
                }
              },
              "props": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "typeName": {
                      "type": "string",
                      "description": "Full type name. Eg: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.Vector3\u0027, etc."
                    },
                    "name": {
                      "type": "string"
                    },
                    "value": {
                      "type": "object"
                    },
                    "fields": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "props": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  },
                  "required": [
                    "typeName",
                    "name",
                    "value"
                  ]
                }
              }
            },
            "required": [
              "typeName",
              "value"
            ],
            "description": "Specify target object to call method on. Should be null if the method is static or if the is no specific target instance.\nNew instance of the specified class will be created if the method is instance method and the targetObject is null.\nRequired:\n- type - full type name of the object to call method on.\n- value - serialized object value. It will be deserialized to the specified type."
          },
          "inputParameters": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "typeName": {
                  "type": "string",
                  "description": "Full type name. Eg: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.Vector3\u0027, etc."
                },
                "name": {
                  "type": "string"
                },
                "value": {
                  "type": "object"
                },
                "fields": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "typeName": {
                        "type": "string",
                        "description": "Full type name. Eg: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.Vector3\u0027, etc."
                      },
                      "name": {
                        "type": "string"
                      },
                      "value": {
                        "type": "object"
                      },
                      "fields": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      },
                      "props": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "required": [
                      "typeName",
                      "name",
                      "value"
                    ]
                  }
                },
                "props": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "typeName": {
                        "type": "string",
                        "description": "Full type name. Eg: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.Vector3\u0027, etc."
                      },
                      "name": {
                        "type": "string"
                      },
                      "value": {
                        "type": "object"
                      },
                      "fields": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      },
                      "props": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "required": [
                      "typeName",
                      "name",
                      "value"
                    ]
                  }
                }
              },
              "required": [
                "typeName",
                "value"
              ]
            },
            "description": "Method input parameters. Per each parameter specify:\n- type - full type name of the object to call method on.\n- name - parameter name.\n- value - serialized object value. It will be deserialized to the specified type."
          },
          "executeInMainThread": {
            "type": "boolean",
            "description": "Set to true if the method should be executed in the main thread. Otherwise, set to false."
          }
        },
        "required": [
          "filter"
        ]
      }
    },
    {
      "name": "Reflection_MethodFind",
      "description": "Find method in the project using C# Reflection.\nIt looks for all assemblies in the project and finds method by its name, class name and parameters.\nEven private methods are available. Use \u0027Reflection_MethodCall\u0027 to call the method after finding it.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "object",
            "properties": {
              "namespace": {
                "type": "string"
              },
              "typeName": {
                "type": "string"
              },
              "methodName": {
                "type": "string"
              },
              "inputParameters": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "typeName": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Method reference. Used to find method in codebase of the project.\n\u0027namespace\u0027 (string) - namespace of the class. It may be empty if the class is in the global namespace or the namespace is unknown.\n\u0027typeName\u0027 (string) - class name. Or substring of the class name.\n\u0027methodName\u0027 (string) - method name. Or substring of the method name.\n\u0027inputParameters\u0027 (List\u003CParameter\u003E) - list of parameters. Each parameter is represented by a \u0027Parameter\u0027 object.\n\n\u0027Parameter\u0027 object contains two fields:\n\u0027typeName\u0027 (string) - type of the parameter including namespace. Sample: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.GameObject\u0027, etc.\n\u0027name\u0027 (string) - name of the parameter. It may be empty if the name is unknown."
          },
          "knownNamespace": {
            "type": "boolean",
            "description": "Set to true if \u0027Namespace\u0027 is known and full namespace name is specified in the \u0027filter.Namespace\u0027 property. Otherwise, set to false."
          },
          "typeNameMatchLevel": {
            "type": "integer",
            "description": "Minimal match level for \u0027typeName\u0027.\n0 - ignore \u0027filter.typeName\u0027,\n1 - contains ignoring case (default value),\n2 - contains case sensitive,\n3 - starts with ignoring case,\n4 - starts with case sensitive,\n5 - equals ignoring case,\n6 - equals case sensitive."
          },
          "methodNameMatchLevel": {
            "type": "integer",
            "description": "Minimal match level for \u0027MethodName\u0027.\n0 - ignore \u0027filter.MethodName\u0027,\n1 - contains ignoring case (default value),\n2 - contains case sensitive,\n3 - starts with ignoring case,\n4 - starts with case sensitive,\n5 - equals ignoring case,\n6 - equals case sensitive."
          },
          "parametersMatchLevel": {
            "type": "integer",
            "description": "Minimal match level for \u0027Parameters\u0027.\n0 - ignore \u0027filter.Parameters\u0027 (default value),\n1 - parameters count is the same,\n2 - equals."
          }
        },
        "required": [
          "filter"
        ]
      }
    },
    {
      "name": "Scene_Create",
      "description": "Create new scene in the project assets.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Path to the scene file."
          }
        },
        "required": [
          "path"
        ]
      }
    },
    {
      "name": "Scene_GetHierarchy",
      "description": "This tool retrieves the list of root GameObjects in the specified scene.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "includeChildrenDepth": {
            "type": "integer",
            "description": "Determines the depth of the hierarchy to include."
          },
          "loadedSceneName": {
            "type": "string",
            "description": "Name of the loaded scene. If empty string, the active scene will be used."
          }
        },
        "required": []
      }
    },
    {
      "name": "Scene_GetLoaded",
      "description": "Returns the list of currently loaded scenes.",
      "inputSchema": {
        "type": "object"
      }
    },
    {
      "name": "Scene_Load",
      "description": "Load scene from the project assets.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Path to the scene file."
          },
          "loadSceneMode": {
            "type": "integer",
            "description": "Load scene mode. 0 - Single, 1 - Additive."
          }
        },
        "required": [
          "path"
        ]
      }
    },
    {
      "name": "Scene_Save",
      "description": "Save scene from the project assets.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Path to the scene file."
          },
          "targetSceneName": {
            "type": "string",
            "description": "Name of the opened scene. Could be empty if need to save current active scene. It is helpful when multiple scenes are opened."
          }
        },
        "required": [
          "path"
        ]
      }
    },
    {
      "name": "Scene_Unload",
      "description": "Destroys all GameObjects associated with the given Scene and removes the Scene from the SceneManager.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the loaded scene."
          }
        },
        "required": [
          "name"
        ]
      }
    },
    {
      "name": "Script_Delete",
      "description": "Delete the script file. Does AssetDatabase.Refresh() at the end.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "filePath": {
            "type": "string",
            "description": "The path to the file. Sample: \u0022Assets/Scripts/MyScript.cs\u0022."
          }
        },
        "required": [
          "filePath"
        ]
      }
    },
    {
      "name": "Script_Read",
      "description": "Reads the content of a script file and returns it as a string.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "filePath": {
            "type": "string",
            "description": "The path to the file. Sample: \u0022Assets/Scripts/MyScript.cs\u0022."
          }
        },
        "required": [
          "filePath"
        ]
      }
    },
    {
      "name": "Script_CreateOrUpdate",
      "description": "Creates or updates a script file with the provided content. Does AssetDatabase.Refresh() at the end.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "filePath": {
            "type": "string",
            "description": "The path to the file. Sample: \u0022Assets/Scripts/MyScript.cs\u0022."
          },
          "content": {
            "type": "string",
            "description": "C# code - content of the file."
          }
        },
        "required": [
          "filePath",
          "content"
        ]
      }
    }
  ]
} 
2025-06-03 22:22:23.5034 | TRACE | com.IvanMurzak.Unity.MCP.Server.ToolRouter | ListAll, result: {
  "tools": [
    {
      "name": "Assets_Copy",
      "description": "Copy the asset at path and stores it at newPath. Does AssetDatabase.Refresh() at the end.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "sourcePaths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The paths of the asset to copy."
          },
          "destinationPaths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The paths to store the copied asset."
          }
        },
        "required": [
          "sourcePaths",
          "destinationPaths"
        ]
      }
    },
    {
      "name": "Assets_CreateFolders",
      "description": "Create folders at specific locations in the project.\nUse it to organize scripts and assets in the project. Does AssetDatabase.Refresh() at the end.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "paths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The paths for the folders to create."
          }
        },
        "required": [
          "paths"
        ]
      }
    },
    {
      "name": "Assets_Delete",
      "description": "Delete the assets at paths from the project. Does AssetDatabase.Refresh() at the end.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "paths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The paths of the assets"
          }
        },
        "required": [
          "paths"
        ]
      }
    },
    {
      "name": "Assets_Find",
      "description": "Search the asset database using the search filter string.\nAvailable types:\nt:AnimationClip\nt:AudioClip\nt:AudioMixer\nt:ComputeShader\nt:Font\nt:GUISkin\nt:Material\nt:Mesh\nt:Model\nt:PhysicMaterial\nt:Prefab\nt:Scene\nt:Script\nt:Shader\nt:Sprite\nt:Texture\nt:VideoClip\nt:VisualEffectAsset\nt:VisualEffectSubgraph",
      "inputSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "description": "Searching filter. Could be empty.\nName: Filter assets by their filename (without extension). Words separated by whitespace are treated as separate name searches. For example, \u0027test asset\u0027 is a name of an Asset which will be searched for. Note that the name can be used to identify an asset. Further, the name used in the filter string can be specified as a subsection. For example, the \u0027test asset\u0027 example above can be matched using \u0027test\u0027.\nLabels (l:): Assets can have labels attached to them. Assets with particular labels can be found using the keyword \u0027l:\u0027 before each label. This indicates that the string is searching for labels.\nTypes (t:): Find assets based on explicitly identified types. The keyword \u0027t:\u0027 is used as a way to specify that typed assets are being looked for. If more than one type is included in the filter string, then assets that match one class will be returned. Types can either be built-in types such as Texture2D or user-created script classes. User-created classes are assets created from a ScriptableObject class in the project. If all assets are wanted, use Object as all assets derive from Object. Specifying one or more folders using the searchInFolders argument will limit the searching to these folders and their child folders. This is faster than searching all assets in all folders.\nAssetBundles (b:): Find assets which are part of an Asset bundle. The keyword \u0027b:\u0027 is used to determine that Asset bundle names should be part of the query.\nArea (a:): Find assets in a specific area of a project. Valid values are \u0027all\u0027, \u0027assets\u0027, and \u0027packages\u0027. Use this to make your query more specific using the \u0027a:\u0027 keyword followed by the area name to speed up searching.\nGlobbing (glob:): Use globbing to match specific rules. The keyword \u0027glob:\u0027 is followed by the query. For example, \u0027glob:Editor\u0027 will find all Editor folders in a project, \u0027glob:(Editor|Resources)\u0027 will find all Editor and Resources folders in a project, \u0027glob:Editor/*\u0027 will return all Assets inside Editor folders in a project, while \u0027glob:Editor/**\u0027 will return all Assets within Editor folders recursively.\n\nNote:\nSearching is case insensitive."
          },
          "searchInFolders": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The folders where the search will start. If null, the search will be performed in all folders."
          }
        },
        "required": []
      }
    },
    {
      "name": "Assets_Material_Create",
      "description": "Create new material asset with default parameters. Right \u0027shaderName\u0027 should be set. To find the shader, use \u0027Shader.Find\u0027 method.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "assetPath": {
            "type": "string",
            "description": "Asset path. Starts with \u0027Assets/\u0027. Ends with \u0027.mat\u0027."
          },
          "shaderName": {
            "type": "string",
            "description": "Name of the shader that need to be used to create the material."
          }
        },
        "required": [
          "assetPath",
          "shaderName"
        ]
      }
    },
    {
      "name": "Assets_Modify",
      "description": "Modify asset in the project. Not allowed to modify asset in \u0027Packages/\u0027 folder. Please modify it in \u0027Assets/\u0027 folder.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "content": {
            "type": "object",
            "properties": {
              "typeName": {
                "type": "string",
                "description": "Full type name. Eg: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.Vector3\u0027, etc."
              },
              "name": {
                "type": "string"
              },
              "value": {
                "type": "object"
              },
              "fields": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "typeName": {
                      "type": "string",
                      "description": "Full type name. Eg: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.Vector3\u0027, etc."
                    },
                    "name": {
                      "type": "string"
                    },
                    "value": {
                      "type": "object"
                    },
                    "fields": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "props": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  },
                  "required": [
                    "typeName",
                    "name",
                    "value"
                  ]
                }
              },
              "props": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "typeName": {
                      "type": "string",
                      "description": "Full type name. Eg: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.Vector3\u0027, etc."
                    },
                    "name": {
                      "type": "string"
                    },
                    "value": {
                      "type": "object"
                    },
                    "fields": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "props": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  },
                  "required": [
                    "typeName",
                    "name",
                    "value"
                  ]
                }
              }
            },
            "required": [
              "typeName",
              "value"
            ],
            "description": "The asset content. It overrides the existing asset content."
          },
          "assetPath": {
            "type": "string",
            "description": "Path to the asset. See \u0027Assets_Search\u0027 for more details. Starts with \u0027Assets/\u0027. Priority: 1. (Recommended)"
          },
          "assetGuid": {
            "type": "string",
            "description": "GUID of the asset. Priority: 2."
          }
        },
        "required": [
          "content"
        ]
      }
    },
    {
      "name": "Assets_Move",
      "description": "Move the assets at paths in the project. Should be used for asset rename. Does AssetDatabase.Refresh() at the end.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "sourcePaths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The paths of the assets to move."
          },
          "destinationPaths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The paths of moved assets."
          }
        },
        "required": [
          "sourcePaths",
          "destinationPaths"
        ]
      }
    },
    {
      "name": "Assets_Read",
      "description": "Read file asset in the project.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "assetPath": {
            "type": "string",
            "description": "Path to the asset. See \u0027Assets_Search\u0027 for more details. Starts with \u0027Assets/\u0027. Priority: 1. (Recommended)"
          },
          "assetGuid": {
            "type": "string",
            "description": "GUID of the asset. Priority: 2."
          }
        },
        "required": []
      }
    },
    {
      "name": "Assets_Refresh",
      "description": "Refreshes the AssetDatabase. Use it if any new files were added or updated in the project outside of Unity API.\nDon\u0027t need to call it for Scripts manipulations.\nIt also triggers scripts recompilation if any changes in \u0027.cs\u0027 files.",
      "inputSchema": {
        "type": "object"
      }
    },
    {
      "name": "Assets_Prefab_Close",
      "description": "Close a prefab. Use it when you are in prefab editing mode in Unity Editor.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "save": {
            "type": "boolean",
            "description": "True to save prefab. False to discard changes."
          }
        },
        "required": []
      }
    },
    {
      "name": "Assets_Prefab_Create",
      "description": "Create a prefab from a GameObject in a scene. The prefab will be saved in the project assets at the specified path.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "prefabAssetPath": {
            "type": "string",
            "description": "Prefab asset path. Should be in the format \u0027Assets/Path/To/Prefab.prefab\u0027."
          },
          "instanceID": {
            "type": "integer",
            "description": "\u0027instanceID\u0027 of GameObject in a scene."
          },
          "replaceGameObjectWithPrefab": {
            "type": "boolean",
            "description": "If true, the prefab will replace the GameObject in the scene."
          }
        },
        "required": [
          "prefabAssetPath",
          "instanceID"
        ]
      }
    },
    {
      "name": "Assets_Prefab_Instantiate",
      "description": "Instantiates prefab in a scene.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "prefabAssetPath": {
            "type": "string",
            "description": "Prefab asset path."
          },
          "gameObjectPath": {
            "type": "string",
            "description": "GameObject path in the current active scene."
          },
          "position": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number"
              },
              "y": {
                "type": "number"
              },
              "z": {
                "type": "number"
              }
            },
            "required": [
              "x",
              "y",
              "z"
            ],
            "description": "Transform position of the GameObject."
          },
          "rotation": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number"
              },
              "y": {
                "type": "number"
              },
              "z": {
                "type": "number"
              }
            },
            "required": [
              "x",
              "y",
              "z"
            ],
            "description": "Transform rotation of the GameObject. Euler angles in degrees."
          },
          "scale": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number"
              },
              "y": {
                "type": "number"
              },
              "z": {
                "type": "number"
              }
            },
            "required": [
              "x",
              "y",
              "z"
            ],
            "description": "Transform scale of the GameObject."
          },
          "isLocalSpace": {
            "type": "boolean",
            "description": "World or Local space of transform."
          }
        },
        "required": [
          "prefabAssetPath",
          "gameObjectPath"
        ]
      }
    },
    {
      "name": "Assets_Prefab_Open",
      "description": "Open a prefab. There are two options to open prefab:\n1. Open prefab from asset using \u0027prefabAssetPath\u0027.\n2. Open prefab from GameObject in loaded scene using \u0027instanceID\u0027 of the GameObject.\n   The GameObject should be connected to a prefab.\n\nNote: Please \u0027Close\u0027 the prefab later to exit prefab editing mode.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "instanceID": {
            "type": "integer",
            "description": "\u0027instanceID\u0027 of GameObject in a scene."
          },
          "prefabAssetPath": {
            "type": "string",
            "description": "Prefab asset path. Should be in the format \u0027Assets/Path/To/Prefab.prefab\u0027."
          }
        },
        "required": []
      }
    },
    {
      "name": "Assets_Prefab_Read",
      "description": "Read a prefab content. Use it for get started with prefab editing. There are two options to open prefab:\n1. Read prefab from asset using \u0027prefabAssetPath\u0027.\n2. Read prefab from GameObject in loaded scene using \u0027instanceID\u0027 of the GameObject.\n   The GameObject should be connected to a prefab.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "instanceID": {
            "type": "integer",
            "description": "\u0027instanceID\u0027 of GameObject in a scene."
          },
          "prefabAssetPath": {
            "type": "string",
            "description": "Prefab asset path. Should be in the format \u0027Assets/Path/To/Prefab.prefab\u0027."
          },
          "includeChildrenDepth": {
            "type": "integer",
            "description": "Determines the depth of the hierarchy to include. 0 - means only the target GameObject. 1 - means to include one layer below."
          }
        },
        "required": []
      }
    },
    {
      "name": "Assets_Prefab_Save",
      "description": "Save a prefab. Use it when you are in prefab editing mode in Unity Editor.",
      "inputSchema": {
        "type": "object"
      }
    },
    {
      "name": "Assets_Shader_ListAll",
      "description": "Scans the project assets to find all shaders and to get the name from each of them. Returns the list of shader names.",
      "inputSchema": {
        "type": "object"
      }
    },
    {
      "name": "Component_GetAll",
      "description": "Returns the list of all available components in the project.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "search": {
            "type": "string",
            "description": "Substring for searching components. Could be empty."
          }
        },
        "required": []
      }
    },
    {
      "name": "Editor_GetApplicationInformation",
      "description": "Returns list of available information about \u0027UnityEditor.EditorApplication\u0027.\nUse it to get information about the current state of the Unity Editor application. Such as: playmode, paused state, compilation state, etc.\nEditorApplication.isPlaying - Whether the Editor is in Play mode.\nEditorApplication.isPaused - Whether the Editor is paused.\nEditorApplication.isCompiling - Is editor currently compiling scripts? (Read Only)\nEditorApplication.isPlayingOrWillChangePlaymode - Editor application state which is true only when the Editor is currently in or about to enter Play mode. (Read Only)\nEditorApplication.isUpdating - True if the Editor is currently refreshing the AssetDatabase. (Read Only)\nEditorApplication.applicationContentsPath - Path to the Unity editor contents folder. (Read Only)\nEditorApplication.applicationPath - Gets the path to the Unity Editor application. (Read Only)\nEditorApplication.timeSinceStartup - The time since the editor was started. (Read Only)",
      "inputSchema": {
        "type": "object"
      }
    },
    {
      "name": "Editor_SetApplicationState",
      "description": "Control the Unity Editor application state. You can start, stop, or pause the \u0027playmode\u0027.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "isPlaying": {
            "type": "boolean",
            "description": "If true, the \u0027playmode\u0027 will be started. If false, the \u0027playmode\u0027 will be stopped."
          },
          "isPaused": {
            "type": "boolean",
            "description": "If true, the \u0027playmode\u0027 will be paused. If false, the \u0027playmode\u0027 will be resumed."
          }
        },
        "required": []
      }
    },
    {
      "name": "Editor_Selection_Get",
      "description": "\u0027UnityEditor.Selection\u0027. Access to the selection in the editor.\nUse it to get information about selected Assets or GameObjects in a scene.\nSelection.transforms - Returns the top level selection instanceIDs, excluding Prefabs.\nSelection.instanceIDs - The actual unfiltered selection from the Scene returned as instance ids instead of objects.\nSelection.gameObjects - Returns the actual game object selection. Includes Prefabs, non-modifiable objects. (Read Only)\nSelection.assetGUIDs - Returns the guids of the selected assets. (Read Only)\nSelection.activeGameObject - Returns the active game object. (The one shown in the inspector). (Read Only)\nSelection.activeInstanceID - Returns the instanceID of the actual object selection. Includes Prefabs, non-modifiable objects.\nSelection.activeObject - Returns the actual object selection. Includes Prefabs, non-modifiable objects.\nSelection.activeTransform - Returns the active transform. (The one shown in the inspector).",
      "inputSchema": {
        "type": "object"
      }
    },
    {
      "name": "Editor_Selection_Set",
      "description": "\u0027UnityEditor.Selection\u0027. Access to the selection in the editor.\nUse it to select Assets or GameObjects in a scene. Set empty array to clear selection.\nSelection.instanceIDs - The actual unfiltered selection from the Scene returned as instance ids.\nSelection.activeInstanceID -  The \u0027instanceID\u0027 of the actual object selection. Includes Prefabs, non-modifiable objects.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "instanceIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The \u0027instanceID\u0027 array of the target GameObjects."
          },
          "activeInstanceID": {
            "type": "integer",
            "description": "The \u0027instanceID\u0027 of the target Object."
          }
        },
        "required": []
      }
    },
    {
      "name": "GameObject_AddComponent",
      "description": "Add a component to a GameObject.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "componentNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Full name of the Component. It should include full namespace path and the class name."
          },
          "gameObjectRef": {
            "type": "object",
            "properties": {
              "instanceID": {
                "type": "integer"
              },
              "path": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "GameObject reference. Used to find GameObject in opened Prefab or in a Scene.\nUse one of the following properties:\n1. \u0027instanceID\u0027 (int) - recommended. It finds the exact GameObject.\n2. \u0027path\u0027 (string) - finds GameObject by path. It may find a wrong GameObject.\n3. \u0027name\u0027 (string) - finds GameObject by name. It may find a wrong GameObject."
          }
        },
        "required": [
          "componentNames",
          "gameObjectRef"
        ]
      }
    },
    {
      "name": "GameObject_Create",
      "description": "Create a new GameObject at specific path.\nif needed - provide proper \u0027position\u0027, \u0027rotation\u0027 and \u0027scale\u0027 to reduce amount of operations.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the new GameObject."
          },
          "parentGameObjectRef": {
            "type": "object",
            "properties": {
              "instanceID": {
                "type": "integer"
              },
              "path": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "GameObject reference. Used to find GameObject in opened Prefab or in a Scene.\nUse one of the following properties:\n1. \u0027instanceID\u0027 (int) - recommended. It finds the exact GameObject.\n2. \u0027path\u0027 (string) - finds GameObject by path. It may find a wrong GameObject.\n3. \u0027name\u0027 (string) - finds GameObject by name. It may find a wrong GameObject."
          },
          "position": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number"
              },
              "y": {
                "type": "number"
              },
              "z": {
                "type": "number"
              }
            },
            "required": [
              "x",
              "y",
              "z"
            ],
            "description": "Transform position of the GameObject."
          },
          "rotation": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number"
              },
              "y": {
                "type": "number"
              },
              "z": {
                "type": "number"
              }
            },
            "required": [
              "x",
              "y",
              "z"
            ],
            "description": "Transform rotation of the GameObject. Euler angles in degrees."
          },
          "scale": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number"
              },
              "y": {
                "type": "number"
              },
              "z": {
                "type": "number"
              }
            },
            "required": [
              "x",
              "y",
              "z"
            ],
            "description": "Transform scale of the GameObject."
          },
          "isLocalSpace": {
            "type": "boolean",
            "description": "World or Local space of transform."
          },
          "primitiveType": {
            "type": "integer",
            "description": "-1 - No primitive type; 0 - Cube; 1 - Sphere; 2 - Capsule; 3 - Cylinder; 4 - Plane; 5 - Quad."
          }
        },
        "required": [
          "name"
        ]
      }
    },
    {
      "name": "GameObject_Destroy",
      "description": "Destroy a GameObject and all nested GameObjects recursively.\nUse \u0027instanceID\u0027 whenever possible, because it finds the exact GameObject, when \u0027path\u0027 may find a wrong one.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "gameObjectRef": {
            "type": "object",
            "properties": {
              "instanceID": {
                "type": "integer"
              },
              "path": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "GameObject reference. Used to find GameObject in opened Prefab or in a Scene.\nUse one of the following properties:\n1. \u0027instanceID\u0027 (int) - recommended. It finds the exact GameObject.\n2. \u0027path\u0027 (string) - finds GameObject by path. It may find a wrong GameObject.\n3. \u0027name\u0027 (string) - finds GameObject by name. It may find a wrong GameObject."
          }
        },
        "required": [
          "gameObjectRef"
        ]
      }
    },
    {
      "name": "GameObject_DestroyComponents",
      "description": "Destroy one or many components from target GameObject.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "gameObjectRef": {
            "type": "object",
            "properties": {
              "instanceID": {
                "type": "integer"
              },
              "path": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "GameObject reference. Used to find GameObject in opened Prefab or in a Scene.\nUse one of the following properties:\n1. \u0027instanceID\u0027 (int) - recommended. It finds the exact GameObject.\n2. \u0027path\u0027 (string) - finds GameObject by path. It may find a wrong GameObject.\n3. \u0027name\u0027 (string) - finds GameObject by name. It may find a wrong GameObject."
          },
          "destroyComponentRefs": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "instanceID": {
                  "type": "integer"
                },
                "index": {
                  "type": "integer"
                },
                "typeName": {
                  "type": "string"
                }
              }
            },
            "description": "Component reference. Used to find Component at GameObject.\nUse one of the following properties:\n1. \u0027instanceID\u0027 (int) - recommended. It finds the exact Component. Default value is 0.\n2. \u0027index\u0027 (int) - finds Component by index. It may find a wrong Component. Default value is -1.\n3. \u0027name\u0027 (string) - finds Component by name. It may find a wrong Component. Default value is null."
          }
        },
        "required": [
          "gameObjectRef",
          "destroyComponentRefs"
        ]
      }
    },
    {
      "name": "GameObject_Duplicate",
      "description": "Duplicate GameObjects in opened Prefab or in a Scene.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "gameObjectRefs": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "instanceID": {
                  "type": "integer"
                },
                "path": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            },
            "description": "GameObject references. Used to specify GameObjects in opened Prefab or in a Scene.\nUse one of the following properties:\n1. \u0027instanceID\u0027 (int) - recommended. It finds the exact GameObject.\n2. \u0027path\u0027 (string) - finds GameObject by path. It may find a wrong GameObject.\n3. \u0027name\u0027 (string) - finds GameObject by name. It may find a wrong GameObject."
          }
        },
        "required": [
          "gameObjectRefs"
        ]
      }
    },
    {
      "name": "GameObject_Find",
      "description": "Finds specific GameObject by provided information.\nFirst it looks for the opened Prefab, if any Prefab is opened it looks only there ignoring a scene.\nIf no opened Prefab it looks into current active scene.\nReturns GameObject information and its children.\nAlso, it returns Components preview just for the target GameObject.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "gameObjectRef": {
            "type": "object",
            "properties": {
              "instanceID": {
                "type": "integer"
              },
              "path": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "GameObject reference. Used to find GameObject in opened Prefab or in a Scene.\nUse one of the following properties:\n1. \u0027instanceID\u0027 (int) - recommended. It finds the exact GameObject.\n2. \u0027path\u0027 (string) - finds GameObject by path. It may find a wrong GameObject.\n3. \u0027name\u0027 (string) - finds GameObject by name. It may find a wrong GameObject."
          },
          "includeChildrenDepth": {
            "type": "integer",
            "description": "Determines the depth of the hierarchy to include. 0 - means only the target GameObject. 1 - means to include one layer below."
          },
          "briefData": {
            "type": "boolean",
            "description": "If true, it will print only brief data of the target GameObject."
          }
        },
        "required": [
          "gameObjectRef"
        ]
      }
    },
    {
      "name": "GameObject_Modify",
      "description": "Modify GameObjects and/or attached component\u0027s field and properties.\nYou can modify multiple GameObjects at once. Just provide the same number of GameObject references and SerializedMember objects.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "gameObjectDiffs": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "typeName": {
                  "type": "string",
                  "description": "Full type name. Eg: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.Vector3\u0027, etc."
                },
                "name": {
                  "type": "string"
                },
                "value": {
                  "type": "object"
                },
                "fields": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "typeName": {
                        "type": "string",
                        "description": "Full type name. Eg: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.Vector3\u0027, etc."
                      },
                      "name": {
                        "type": "string"
                      },
                      "value": {
                        "type": "object"
                      },
                      "fields": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      },
                      "props": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "required": [
                      "typeName",
                      "name",
                      "value"
                    ]
                  }
                },
                "props": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "typeName": {
                        "type": "string",
                        "description": "Full type name. Eg: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.Vector3\u0027, etc."
                      },
                      "name": {
                        "type": "string"
                      },
                      "value": {
                        "type": "object"
                      },
                      "fields": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      },
                      "props": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "required": [
                      "typeName",
                      "name",
                      "value"
                    ]
                  }
                }
              },
              "required": [
                "typeName",
                "value"
              ]
            },
            "description": "Json Object with required readonly \u0027instanceID\u0027 and \u0027type\u0027 fields.\nEach field and property requires to have \u0027type\u0027 and \u0027name\u0027 fields to identify the exact modification target.\nFollow the object schema to specify what to change, ignore values that should not be modified. Keep the original data structure.\nAny unknown or wrong located fields and properties will be ignored.\nCheck the result of this command to see what was changed. The ignored fields and properties will be listed."
          },
          "gameObjectRefs": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "instanceID": {
                  "type": "integer"
                },
                "path": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            },
            "description": "GameObject references. Used to specify GameObjects in opened Prefab or in a Scene.\nUse one of the following properties:\n1. \u0027instanceID\u0027 (int) - recommended. It finds the exact GameObject.\n2. \u0027path\u0027 (string) - finds GameObject by path. It may find a wrong GameObject.\n3. \u0027name\u0027 (string) - finds GameObject by name. It may find a wrong GameObject."
          }
        },
        "required": [
          "gameObjectDiffs",
          "gameObjectRefs"
        ]
      }
    },
    {
      "name": "GameObject_SetParent",
      "description": "Set GameObjects in opened Prefab or in a Scene by \u0027instanceID\u0027 (int) array.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "gameObjectRefs": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "instanceID": {
                  "type": "integer"
                },
                "path": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            },
            "description": "GameObject references. Used to specify GameObjects in opened Prefab or in a Scene.\nUse one of the following properties:\n1. \u0027instanceID\u0027 (int) - recommended. It finds the exact GameObject.\n2. \u0027path\u0027 (string) - finds GameObject by path. It may find a wrong GameObject.\n3. \u0027name\u0027 (string) - finds GameObject by name. It may find a wrong GameObject."
          },
          "parentGameObjectRef": {
            "type": "object",
            "properties": {
              "instanceID": {
                "type": "integer"
              },
              "path": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "GameObject reference. Used to find GameObject in opened Prefab or in a Scene.\nUse one of the following properties:\n1. \u0027instanceID\u0027 (int) - recommended. It finds the exact GameObject.\n2. \u0027path\u0027 (string) - finds GameObject by path. It may find a wrong GameObject.\n3. \u0027name\u0027 (string) - finds GameObject by name. It may find a wrong GameObject."
          },
          "worldPositionStays": {
            "type": "boolean",
            "description": "A boolean flag indicating whether the GameObject\u0027s world position should remain unchanged when setting its parent."
          }
        },
        "required": [
          "gameObjectRefs",
          "parentGameObjectRef"
        ]
      }
    },
    {
      "name": "Reflection_MethodCall",
      "description": "Call C# method. Any method could be called, even private methods.\nIt requires to receive proper method schema.\nUse \u0027Reflection_MethodFind\u0027 to find available method before using it.\nReceives input parameters and returns result.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "object",
            "properties": {
              "namespace": {
                "type": "string"
              },
              "typeName": {
                "type": "string"
              },
              "methodName": {
                "type": "string"
              },
              "inputParameters": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "typeName": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Method reference. Used to find method in codebase of the project.\n\u0027namespace\u0027 (string) - namespace of the class. It may be empty if the class is in the global namespace or the namespace is unknown.\n\u0027typeName\u0027 (string) - class name. Or substring of the class name.\n\u0027methodName\u0027 (string) - method name. Or substring of the method name.\n\u0027inputParameters\u0027 (List\u003CParameter\u003E) - list of parameters. Each parameter is represented by a \u0027Parameter\u0027 object.\n\n\u0027Parameter\u0027 object contains two fields:\n\u0027typeName\u0027 (string) - type of the parameter including namespace. Sample: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.GameObject\u0027, etc.\n\u0027name\u0027 (string) - name of the parameter. It may be empty if the name is unknown."
          },
          "knownNamespace": {
            "type": "boolean",
            "description": "Set to true if \u0027Namespace\u0027 is known and full namespace name is specified in the \u0027filter.Namespace\u0027 property. Otherwise, set to false."
          },
          "typeNameMatchLevel": {
            "type": "integer",
            "description": "Minimal match level for \u0027typeName\u0027.\n0 - ignore \u0027filter.typeName\u0027,\n1 - contains ignoring case (default value),\n2 - contains case sensitive,\n3 - starts with ignoring case,\n4 - starts with case sensitive,\n5 - equals ignoring case,\n6 - equals case sensitive."
          },
          "methodNameMatchLevel": {
            "type": "integer",
            "description": "Minimal match level for \u0027MethodName\u0027.\n0 - ignore \u0027filter.MethodName\u0027,\n1 - contains ignoring case (default value),\n2 - contains case sensitive,\n3 - starts with ignoring case,\n4 - starts with case sensitive,\n5 - equals ignoring case,\n6 - equals case sensitive."
          },
          "parametersMatchLevel": {
            "type": "integer",
            "description": "Minimal match level for \u0027Parameters\u0027.\n0 - ignore \u0027filter.Parameters\u0027,\n1 - parameters count is the same,\n2 - equals (default value)."
          },
          "targetObject": {
            "type": "object",
            "properties": {
              "typeName": {
                "type": "string",
                "description": "Full type name. Eg: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.Vector3\u0027, etc."
              },
              "name": {
                "type": "string"
              },
              "value": {
                "type": "object"
              },
              "fields": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "typeName": {
                      "type": "string",
                      "description": "Full type name. Eg: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.Vector3\u0027, etc."
                    },
                    "name": {
                      "type": "string"
                    },
                    "value": {
                      "type": "object"
                    },
                    "fields": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "props": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  },
                  "required": [
                    "typeName",
                    "name",
                    "value"
                  ]
                }
              },
              "props": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "typeName": {
                      "type": "string",
                      "description": "Full type name. Eg: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.Vector3\u0027, etc."
                    },
                    "name": {
                      "type": "string"
                    },
                    "value": {
                      "type": "object"
                    },
                    "fields": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "props": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  },
                  "required": [
                    "typeName",
                    "name",
                    "value"
                  ]
                }
              }
            },
            "required": [
              "typeName",
              "value"
            ],
            "description": "Specify target object to call method on. Should be null if the method is static or if the is no specific target instance.\nNew instance of the specified class will be created if the method is instance method and the targetObject is null.\nRequired:\n- type - full type name of the object to call method on.\n- value - serialized object value. It will be deserialized to the specified type."
          },
          "inputParameters": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "typeName": {
                  "type": "string",
                  "description": "Full type name. Eg: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.Vector3\u0027, etc."
                },
                "name": {
                  "type": "string"
                },
                "value": {
                  "type": "object"
                },
                "fields": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "typeName": {
                        "type": "string",
                        "description": "Full type name. Eg: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.Vector3\u0027, etc."
                      },
                      "name": {
                        "type": "string"
                      },
                      "value": {
                        "type": "object"
                      },
                      "fields": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      },
                      "props": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "required": [
                      "typeName",
                      "name",
                      "value"
                    ]
                  }
                },
                "props": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "typeName": {
                        "type": "string",
                        "description": "Full type name. Eg: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.Vector3\u0027, etc."
                      },
                      "name": {
                        "type": "string"
                      },
                      "value": {
                        "type": "object"
                      },
                      "fields": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      },
                      "props": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "required": [
                      "typeName",
                      "name",
                      "value"
                    ]
                  }
                }
              },
              "required": [
                "typeName",
                "value"
              ]
            },
            "description": "Method input parameters. Per each parameter specify:\n- type - full type name of the object to call method on.\n- name - parameter name.\n- value - serialized object value. It will be deserialized to the specified type."
          },
          "executeInMainThread": {
            "type": "boolean",
            "description": "Set to true if the method should be executed in the main thread. Otherwise, set to false."
          }
        },
        "required": [
          "filter"
        ]
      }
    },
    {
      "name": "Reflection_MethodFind",
      "description": "Find method in the project using C# Reflection.\nIt looks for all assemblies in the project and finds method by its name, class name and parameters.\nEven private methods are available. Use \u0027Reflection_MethodCall\u0027 to call the method after finding it.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "object",
            "properties": {
              "namespace": {
                "type": "string"
              },
              "typeName": {
                "type": "string"
              },
              "methodName": {
                "type": "string"
              },
              "inputParameters": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "typeName": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Method reference. Used to find method in codebase of the project.\n\u0027namespace\u0027 (string) - namespace of the class. It may be empty if the class is in the global namespace or the namespace is unknown.\n\u0027typeName\u0027 (string) - class name. Or substring of the class name.\n\u0027methodName\u0027 (string) - method name. Or substring of the method name.\n\u0027inputParameters\u0027 (List\u003CParameter\u003E) - list of parameters. Each parameter is represented by a \u0027Parameter\u0027 object.\n\n\u0027Parameter\u0027 object contains two fields:\n\u0027typeName\u0027 (string) - type of the parameter including namespace. Sample: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.GameObject\u0027, etc.\n\u0027name\u0027 (string) - name of the parameter. It may be empty if the name is unknown."
          },
          "knownNamespace": {
            "type": "boolean",
            "description": "Set to true if \u0027Namespace\u0027 is known and full namespace name is specified in the \u0027filter.Namespace\u0027 property. Otherwise, set to false."
          },
          "typeNameMatchLevel": {
            "type": "integer",
            "description": "Minimal match level for \u0027typeName\u0027.\n0 - ignore \u0027filter.typeName\u0027,\n1 - contains ignoring case (default value),\n2 - contains case sensitive,\n3 - starts with ignoring case,\n4 - starts with case sensitive,\n5 - equals ignoring case,\n6 - equals case sensitive."
          },
          "methodNameMatchLevel": {
            "type": "integer",
            "description": "Minimal match level for \u0027MethodName\u0027.\n0 - ignore \u0027filter.MethodName\u0027,\n1 - contains ignoring case (default value),\n2 - contains case sensitive,\n3 - starts with ignoring case,\n4 - starts with case sensitive,\n5 - equals ignoring case,\n6 - equals case sensitive."
          },
          "parametersMatchLevel": {
            "type": "integer",
            "description": "Minimal match level for \u0027Parameters\u0027.\n0 - ignore \u0027filter.Parameters\u0027 (default value),\n1 - parameters count is the same,\n2 - equals."
          }
        },
        "required": [
          "filter"
        ]
      }
    },
    {
      "name": "Scene_Create",
      "description": "Create new scene in the project assets.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Path to the scene file."
          }
        },
        "required": [
          "path"
        ]
      }
    },
    {
      "name": "Scene_GetHierarchy",
      "description": "This tool retrieves the list of root GameObjects in the specified scene.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "includeChildrenDepth": {
            "type": "integer",
            "description": "Determines the depth of the hierarchy to include."
          },
          "loadedSceneName": {
            "type": "string",
            "description": "Name of the loaded scene. If empty string, the active scene will be used."
          }
        },
        "required": []
      }
    },
    {
      "name": "Scene_GetLoaded",
      "description": "Returns the list of currently loaded scenes.",
      "inputSchema": {
        "type": "object"
      }
    },
    {
      "name": "Scene_Load",
      "description": "Load scene from the project assets.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Path to the scene file."
          },
          "loadSceneMode": {
            "type": "integer",
            "description": "Load scene mode. 0 - Single, 1 - Additive."
          }
        },
        "required": [
          "path"
        ]
      }
    },
    {
      "name": "Scene_Save",
      "description": "Save scene from the project assets.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Path to the scene file."
          },
          "targetSceneName": {
            "type": "string",
            "description": "Name of the opened scene. Could be empty if need to save current active scene. It is helpful when multiple scenes are opened."
          }
        },
        "required": [
          "path"
        ]
      }
    },
    {
      "name": "Scene_Unload",
      "description": "Destroys all GameObjects associated with the given Scene and removes the Scene from the SceneManager.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the loaded scene."
          }
        },
        "required": [
          "name"
        ]
      }
    },
    {
      "name": "Script_Delete",
      "description": "Delete the script file. Does AssetDatabase.Refresh() at the end.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "filePath": {
            "type": "string",
            "description": "The path to the file. Sample: \u0022Assets/Scripts/MyScript.cs\u0022."
          }
        },
        "required": [
          "filePath"
        ]
      }
    },
    {
      "name": "Script_Read",
      "description": "Reads the content of a script file and returns it as a string.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "filePath": {
            "type": "string",
            "description": "The path to the file. Sample: \u0022Assets/Scripts/MyScript.cs\u0022."
          }
        },
        "required": [
          "filePath"
        ]
      }
    },
    {
      "name": "Script_CreateOrUpdate",
      "description": "Creates or updates a script file with the provided content. Does AssetDatabase.Refresh() at the end.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "filePath": {
            "type": "string",
            "description": "The path to the file. Sample: \u0022Assets/Scripts/MyScript.cs\u0022."
          },
          "content": {
            "type": "string",
            "description": "C# code - content of the file."
          }
        },
        "required": [
          "filePath",
          "content"
        ]
      }
    }
  ]
} 
2025-06-03 22:22:23.5034 | DEBUG | ModelContextProtocol.Server.McpServer | Sending message to Server (com.IvanMurzak.Unity.MCP.Server 1.0.0.0), Client (claude-ai 0.1.0): {"jsonrpc":"2.0","method":"notifications/tools/list_changed"} 
2025-06-03 22:22:23.5034 | DEBUG | ModelContextProtocol.Server.McpServer | Sending message to Server (com.IvanMurzak.Unity.MCP.Server 1.0.0.0), Client (claude-ai 0.1.0): {"jsonrpc":"2.0","method":"notifications/tools/list_changed"} 
2025-06-03 22:22:23.5034 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport sending message for Server (stream) (com.IvanMurzak.Unity.MCP.Server) with ID (no id), JSON (null) 
2025-06-03 22:22:23.5034 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport message sent for Server (stream) (com.IvanMurzak.Unity.MCP.Server) with ID (no id) 
2025-06-03 22:22:23.5034 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport sending message for Server (stream) (com.IvanMurzak.Unity.MCP.Server) with ID (no id), JSON (null) 
2025-06-03 22:22:23.5034 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport message sent for Server (stream) (com.IvanMurzak.Unity.MCP.Server) with ID (no id) 
2025-06-03 22:22:23.5034 | INFO  | ModelContextProtocol.Server.McpServer | Request handler completed for Server (com.IvanMurzak.Unity.MCP.Server 1.0.0.0), Client (claude-ai 0.1.0) with method tools/list 
2025-06-03 22:22:23.5034 | INFO  | ModelContextProtocol.Server.McpServer | Request handler completed for Server (com.IvanMurzak.Unity.MCP.Server 1.0.0.0), Client (claude-ai 0.1.0) with method tools/list 
2025-06-03 22:22:23.5034 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport sending message for Server (stream) (com.IvanMurzak.Unity.MCP.Server) with ID 1, JSON (null) 
2025-06-03 22:22:23.5034 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport message sent for Server (stream) (com.IvanMurzak.Unity.MCP.Server) with ID 1 
2025-06-03 22:22:23.5034 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport sending message for Server (stream) (com.IvanMurzak.Unity.MCP.Server) with ID 2, JSON (null) 
2025-06-03 22:22:23.5034 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport message sent for Server (stream) (com.IvanMurzak.Unity.MCP.Server) with ID 2 
2025-06-03 22:22:23.7423 | TRACE | com.IvanMurzak.Unity.MCP.Server.RemoteToolRunner | Invoke '/mcp/run-list-tool', ConnectionId ='SHMN8ggbG6281R2igOxy6Q'. RequestData:
com.IvanMurzak.Unity.MCP.Common.Data.RequestListTool
SHMN8ggbG6281R2igOxy6Q 
2025-06-03 22:22:23.7423 | TRACE | com.IvanMurzak.Unity.MCP.Server.RemoteToolRunner | Invoke '/mcp/run-list-tool', ConnectionId ='SHMN8ggbG6281R2igOxy6Q'. RequestData:
com.IvanMurzak.Unity.MCP.Common.Data.RequestListTool
SHMN8ggbG6281R2igOxy6Q 
2025-06-03 22:22:23.7462 | TRACE | com.IvanMurzak.Unity.MCP.Server.ToolRouter | ListAll, result: {
  "tools": [
    {
      "name": "Assets_Copy",
      "description": "Copy the asset at path and stores it at newPath. Does AssetDatabase.Refresh() at the end.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "sourcePaths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The paths of the asset to copy."
          },
          "destinationPaths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The paths to store the copied asset."
          }
        },
        "required": [
          "sourcePaths",
          "destinationPaths"
        ]
      }
    },
    {
      "name": "Assets_CreateFolders",
      "description": "Create folders at specific locations in the project.\nUse it to organize scripts and assets in the project. Does AssetDatabase.Refresh() at the end.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "paths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The paths for the folders to create."
          }
        },
        "required": [
          "paths"
        ]
      }
    },
    {
      "name": "Assets_Delete",
      "description": "Delete the assets at paths from the project. Does AssetDatabase.Refresh() at the end.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "paths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The paths of the assets"
          }
        },
        "required": [
          "paths"
        ]
      }
    },
    {
      "name": "Assets_Find",
      "description": "Search the asset database using the search filter string.\nAvailable types:\nt:AnimationClip\nt:AudioClip\nt:AudioMixer\nt:ComputeShader\nt:Font\nt:GUISkin\nt:Material\nt:Mesh\nt:Model\nt:PhysicMaterial\nt:Prefab\nt:Scene\nt:Script\nt:Shader\nt:Sprite\nt:Texture\nt:VideoClip\nt:VisualEffectAsset\nt:VisualEffectSubgraph",
      "inputSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "description": "Searching filter. Could be empty.\nName: Filter assets by their filename (without extension). Words separated by whitespace are treated as separate name searches. For example, \u0027test asset\u0027 is a name of an Asset which will be searched for. Note that the name can be used to identify an asset. Further, the name used in the filter string can be specified as a subsection. For example, the \u0027test asset\u0027 example above can be matched using \u0027test\u0027.\nLabels (l:): Assets can have labels attached to them. Assets with particular labels can be found using the keyword \u0027l:\u0027 before each label. This indicates that the string is searching for labels.\nTypes (t:): Find assets based on explicitly identified types. The keyword \u0027t:\u0027 is used as a way to specify that typed assets are being looked for. If more than one type is included in the filter string, then assets that match one class will be returned. Types can either be built-in types such as Texture2D or user-created script classes. User-created classes are assets created from a ScriptableObject class in the project. If all assets are wanted, use Object as all assets derive from Object. Specifying one or more folders using the searchInFolders argument will limit the searching to these folders and their child folders. This is faster than searching all assets in all folders.\nAssetBundles (b:): Find assets which are part of an Asset bundle. The keyword \u0027b:\u0027 is used to determine that Asset bundle names should be part of the query.\nArea (a:): Find assets in a specific area of a project. Valid values are \u0027all\u0027, \u0027assets\u0027, and \u0027packages\u0027. Use this to make your query more specific using the \u0027a:\u0027 keyword followed by the area name to speed up searching.\nGlobbing (glob:): Use globbing to match specific rules. The keyword \u0027glob:\u0027 is followed by the query. For example, \u0027glob:Editor\u0027 will find all Editor folders in a project, \u0027glob:(Editor|Resources)\u0027 will find all Editor and Resources folders in a project, \u0027glob:Editor/*\u0027 will return all Assets inside Editor folders in a project, while \u0027glob:Editor/**\u0027 will return all Assets within Editor folders recursively.\n\nNote:\nSearching is case insensitive."
          },
          "searchInFolders": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The folders where the search will start. If null, the search will be performed in all folders."
          }
        },
        "required": []
      }
    },
    {
      "name": "Assets_Material_Create",
      "description": "Create new material asset with default parameters. Right \u0027shaderName\u0027 should be set. To find the shader, use \u0027Shader.Find\u0027 method.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "assetPath": {
            "type": "string",
            "description": "Asset path. Starts with \u0027Assets/\u0027. Ends with \u0027.mat\u0027."
          },
          "shaderName": {
            "type": "string",
            "description": "Name of the shader that need to be used to create the material."
          }
        },
        "required": [
          "assetPath",
          "shaderName"
        ]
      }
    },
    {
      "name": "Assets_Modify",
      "description": "Modify asset in the project. Not allowed to modify asset in \u0027Packages/\u0027 folder. Please modify it in \u0027Assets/\u0027 folder.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "content": {
            "type": "object",
            "properties": {
              "typeName": {
                "type": "string",
                "description": "Full type name. Eg: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.Vector3\u0027, etc."
              },
              "name": {
                "type": "string"
              },
              "value": {
                "type": "object"
              },
              "fields": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "typeName": {
                      "type": "string",
                      "description": "Full type name. Eg: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.Vector3\u0027, etc."
                    },
                    "name": {
                      "type": "string"
                    },
                    "value": {
                      "type": "object"
                    },
                    "fields": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "props": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  },
                  "required": [
                    "typeName",
                    "name",
                    "value"
                  ]
                }
              },
              "props": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "typeName": {
                      "type": "string",
                      "description": "Full type name. Eg: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.Vector3\u0027, etc."
                    },
                    "name": {
                      "type": "string"
                    },
                    "value": {
                      "type": "object"
                    },
                    "fields": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "props": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  },
                  "required": [
                    "typeName",
                    "name",
                    "value"
                  ]
                }
              }
            },
            "required": [
              "typeName",
              "value"
            ],
            "description": "The asset content. It overrides the existing asset content."
          },
          "assetPath": {
            "type": "string",
            "description": "Path to the asset. See \u0027Assets_Search\u0027 for more details. Starts with \u0027Assets/\u0027. Priority: 1. (Recommended)"
          },
          "assetGuid": {
            "type": "string",
            "description": "GUID of the asset. Priority: 2."
          }
        },
        "required": [
          "content"
        ]
      }
    },
    {
      "name": "Assets_Move",
      "description": "Move the assets at paths in the project. Should be used for asset rename. Does AssetDatabase.Refresh() at the end.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "sourcePaths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The paths of the assets to move."
          },
          "destinationPaths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The paths of moved assets."
          }
        },
        "required": [
          "sourcePaths",
          "destinationPaths"
        ]
      }
    },
    {
      "name": "Assets_Read",
      "description": "Read file asset in the project.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "assetPath": {
            "type": "string",
            "description": "Path to the asset. See \u0027Assets_Search\u0027 for more details. Starts with \u0027Assets/\u0027. Priority: 1. (Recommended)"
          },
          "assetGuid": {
            "type": "string",
            "description": "GUID of the asset. Priority: 2."
          }
        },
        "required": []
      }
    },
    {
      "name": "Assets_Refresh",
      "description": "Refreshes the AssetDatabase. Use it if any new files were added or updated in the project outside of Unity API.\nDon\u0027t need to call it for Scripts manipulations.\nIt also triggers scripts recompilation if any changes in \u0027.cs\u0027 files.",
      "inputSchema": {
        "type": "object"
      }
    },
    {
      "name": "Assets_Prefab_Close",
      "description": "Close a prefab. Use it when you are in prefab editing mode in Unity Editor.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "save": {
            "type": "boolean",
            "description": "True to save prefab. False to discard changes."
          }
        },
        "required": []
      }
    },
    {
      "name": "Assets_Prefab_Create",
      "description": "Create a prefab from a GameObject in a scene. The prefab will be saved in the project assets at the specified path.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "prefabAssetPath": {
            "type": "string",
            "description": "Prefab asset path. Should be in the format \u0027Assets/Path/To/Prefab.prefab\u0027."
          },
          "instanceID": {
            "type": "integer",
            "description": "\u0027instanceID\u0027 of GameObject in a scene."
          },
          "replaceGameObjectWithPrefab": {
            "type": "boolean",
            "description": "If true, the prefab will replace the GameObject in the scene."
          }
        },
        "required": [
          "prefabAssetPath",
          "instanceID"
        ]
      }
    },
    {
      "name": "Assets_Prefab_Instantiate",
      "description": "Instantiates prefab in a scene.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "prefabAssetPath": {
            "type": "string",
            "description": "Prefab asset path."
          },
          "gameObjectPath": {
            "type": "string",
            "description": "GameObject path in the current active scene."
          },
          "position": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number"
              },
              "y": {
                "type": "number"
              },
              "z": {
                "type": "number"
              }
            },
            "required": [
              "x",
              "y",
              "z"
            ],
            "description": "Transform position of the GameObject."
          },
          "rotation": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number"
              },
              "y": {
                "type": "number"
              },
              "z": {
                "type": "number"
              }
            },
            "required": [
              "x",
              "y",
              "z"
            ],
            "description": "Transform rotation of the GameObject. Euler angles in degrees."
          },
          "scale": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number"
              },
              "y": {
                "type": "number"
              },
              "z": {
                "type": "number"
              }
            },
            "required": [
              "x",
              "y",
              "z"
            ],
            "description": "Transform scale of the GameObject."
          },
          "isLocalSpace": {
            "type": "boolean",
            "description": "World or Local space of transform."
          }
        },
        "required": [
          "prefabAssetPath",
          "gameObjectPath"
        ]
      }
    },
    {
      "name": "Assets_Prefab_Open",
      "description": "Open a prefab. There are two options to open prefab:\n1. Open prefab from asset using \u0027prefabAssetPath\u0027.\n2. Open prefab from GameObject in loaded scene using \u0027instanceID\u0027 of the GameObject.\n   The GameObject should be connected to a prefab.\n\nNote: Please \u0027Close\u0027 the prefab later to exit prefab editing mode.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "instanceID": {
            "type": "integer",
            "description": "\u0027instanceID\u0027 of GameObject in a scene."
          },
          "prefabAssetPath": {
            "type": "string",
            "description": "Prefab asset path. Should be in the format \u0027Assets/Path/To/Prefab.prefab\u0027."
          }
        },
        "required": []
      }
    },
    {
      "name": "Assets_Prefab_Read",
      "description": "Read a prefab content. Use it for get started with prefab editing. There are two options to open prefab:\n1. Read prefab from asset using \u0027prefabAssetPath\u0027.\n2. Read prefab from GameObject in loaded scene using \u0027instanceID\u0027 of the GameObject.\n   The GameObject should be connected to a prefab.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "instanceID": {
            "type": "integer",
            "description": "\u0027instanceID\u0027 of GameObject in a scene."
          },
          "prefabAssetPath": {
            "type": "string",
            "description": "Prefab asset path. Should be in the format \u0027Assets/Path/To/Prefab.prefab\u0027."
          },
          "includeChildrenDepth": {
            "type": "integer",
            "description": "Determines the depth of the hierarchy to include. 0 - means only the target GameObject. 1 - means to include one layer below."
          }
        },
        "required": []
      }
    },
    {
      "name": "Assets_Prefab_Save",
      "description": "Save a prefab. Use it when you are in prefab editing mode in Unity Editor.",
      "inputSchema": {
        "type": "object"
      }
    },
    {
      "name": "Assets_Shader_ListAll",
      "description": "Scans the project assets to find all shaders and to get the name from each of them. Returns the list of shader names.",
      "inputSchema": {
        "type": "object"
      }
    },
    {
      "name": "Component_GetAll",
      "description": "Returns the list of all available components in the project.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "search": {
            "type": "string",
            "description": "Substring for searching components. Could be empty."
          }
        },
        "required": []
      }
    },
    {
      "name": "Editor_GetApplicationInformation",
      "description": "Returns list of available information about \u0027UnityEditor.EditorApplication\u0027.\nUse it to get information about the current state of the Unity Editor application. Such as: playmode, paused state, compilation state, etc.\nEditorApplication.isPlaying - Whether the Editor is in Play mode.\nEditorApplication.isPaused - Whether the Editor is paused.\nEditorApplication.isCompiling - Is editor currently compiling scripts? (Read Only)\nEditorApplication.isPlayingOrWillChangePlaymode - Editor application state which is true only when the Editor is currently in or about to enter Play mode. (Read Only)\nEditorApplication.isUpdating - True if the Editor is currently refreshing the AssetDatabase. (Read Only)\nEditorApplication.applicationContentsPath - Path to the Unity editor contents folder. (Read Only)\nEditorApplication.applicationPath - Gets the path to the Unity Editor application. (Read Only)\nEditorApplication.timeSinceStartup - The time since the editor was started. (Read Only)",
      "inputSchema": {
        "type": "object"
      }
    },
    {
      "name": "Editor_SetApplicationState",
      "description": "Control the Unity Editor application state. You can start, stop, or pause the \u0027playmode\u0027.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "isPlaying": {
            "type": "boolean",
            "description": "If true, the \u0027playmode\u0027 will be started. If false, the \u0027playmode\u0027 will be stopped."
          },
          "isPaused": {
            "type": "boolean",
            "description": "If true, the \u0027playmode\u0027 will be paused. If false, the \u0027playmode\u0027 will be resumed."
          }
        },
        "required": []
      }
    },
    {
      "name": "Editor_Selection_Get",
      "description": "\u0027UnityEditor.Selection\u0027. Access to the selection in the editor.\nUse it to get information about selected Assets or GameObjects in a scene.\nSelection.transforms - Returns the top level selection instanceIDs, excluding Prefabs.\nSelection.instanceIDs - The actual unfiltered selection from the Scene returned as instance ids instead of objects.\nSelection.gameObjects - Returns the actual game object selection. Includes Prefabs, non-modifiable objects. (Read Only)\nSelection.assetGUIDs - Returns the guids of the selected assets. (Read Only)\nSelection.activeGameObject - Returns the active game object. (The one shown in the inspector). (Read Only)\nSelection.activeInstanceID - Returns the instanceID of the actual object selection. Includes Prefabs, non-modifiable objects.\nSelection.activeObject - Returns the actual object selection. Includes Prefabs, non-modifiable objects.\nSelection.activeTransform - Returns the active transform. (The one shown in the inspector).",
      "inputSchema": {
        "type": "object"
      }
    },
    {
      "name": "Editor_Selection_Set",
      "description": "\u0027UnityEditor.Selection\u0027. Access to the selection in the editor.\nUse it to select Assets or GameObjects in a scene. Set empty array to clear selection.\nSelection.instanceIDs - The actual unfiltered selection from the Scene returned as instance ids.\nSelection.activeInstanceID -  The \u0027instanceID\u0027 of the actual object selection. Includes Prefabs, non-modifiable objects.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "instanceIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The \u0027instanceID\u0027 array of the target GameObjects."
          },
          "activeInstanceID": {
            "type": "integer",
            "description": "The \u0027instanceID\u0027 of the target Object."
          }
        },
        "required": []
      }
    },
    {
      "name": "GameObject_AddComponent",
      "description": "Add a component to a GameObject.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "componentNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Full name of the Component. It should include full namespace path and the class name."
          },
          "gameObjectRef": {
            "type": "object",
            "properties": {
              "instanceID": {
                "type": "integer"
              },
              "path": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "GameObject reference. Used to find GameObject in opened Prefab or in a Scene.\nUse one of the following properties:\n1. \u0027instanceID\u0027 (int) - recommended. It finds the exact GameObject.\n2. \u0027path\u0027 (string) - finds GameObject by path. It may find a wrong GameObject.\n3. \u0027name\u0027 (string) - finds GameObject by name. It may find a wrong GameObject."
          }
        },
        "required": [
          "componentNames",
          "gameObjectRef"
        ]
      }
    },
    {
      "name": "GameObject_Create",
      "description": "Create a new GameObject at specific path.\nif needed - provide proper \u0027position\u0027, \u0027rotation\u0027 and \u0027scale\u0027 to reduce amount of operations.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the new GameObject."
          },
          "parentGameObjectRef": {
            "type": "object",
            "properties": {
              "instanceID": {
                "type": "integer"
              },
              "path": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "GameObject reference. Used to find GameObject in opened Prefab or in a Scene.\nUse one of the following properties:\n1. \u0027instanceID\u0027 (int) - recommended. It finds the exact GameObject.\n2. \u0027path\u0027 (string) - finds GameObject by path. It may find a wrong GameObject.\n3. \u0027name\u0027 (string) - finds GameObject by name. It may find a wrong GameObject."
          },
          "position": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number"
              },
              "y": {
                "type": "number"
              },
              "z": {
                "type": "number"
              }
            },
            "required": [
              "x",
              "y",
              "z"
            ],
            "description": "Transform position of the GameObject."
          },
          "rotation": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number"
              },
              "y": {
                "type": "number"
              },
              "z": {
                "type": "number"
              }
            },
            "required": [
              "x",
              "y",
              "z"
            ],
            "description": "Transform rotation of the GameObject. Euler angles in degrees."
          },
          "scale": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number"
              },
              "y": {
                "type": "number"
              },
              "z": {
                "type": "number"
              }
            },
            "required": [
              "x",
              "y",
              "z"
            ],
            "description": "Transform scale of the GameObject."
          },
          "isLocalSpace": {
            "type": "boolean",
            "description": "World or Local space of transform."
          },
          "primitiveType": {
            "type": "integer",
            "description": "-1 - No primitive type; 0 - Cube; 1 - Sphere; 2 - Capsule; 3 - Cylinder; 4 - Plane; 5 - Quad."
          }
        },
        "required": [
          "name"
        ]
      }
    },
    {
      "name": "GameObject_Destroy",
      "description": "Destroy a GameObject and all nested GameObjects recursively.\nUse \u0027instanceID\u0027 whenever possible, because it finds the exact GameObject, when \u0027path\u0027 may find a wrong one.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "gameObjectRef": {
            "type": "object",
            "properties": {
              "instanceID": {
                "type": "integer"
              },
              "path": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "GameObject reference. Used to find GameObject in opened Prefab or in a Scene.\nUse one of the following properties:\n1. \u0027instanceID\u0027 (int) - recommended. It finds the exact GameObject.\n2. \u0027path\u0027 (string) - finds GameObject by path. It may find a wrong GameObject.\n3. \u0027name\u0027 (string) - finds GameObject by name. It may find a wrong GameObject."
          }
        },
        "required": [
          "gameObjectRef"
        ]
      }
    },
    {
      "name": "GameObject_DestroyComponents",
      "description": "Destroy one or many components from target GameObject.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "gameObjectRef": {
            "type": "object",
            "properties": {
              "instanceID": {
                "type": "integer"
              },
              "path": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "GameObject reference. Used to find GameObject in opened Prefab or in a Scene.\nUse one of the following properties:\n1. \u0027instanceID\u0027 (int) - recommended. It finds the exact GameObject.\n2. \u0027path\u0027 (string) - finds GameObject by path. It may find a wrong GameObject.\n3. \u0027name\u0027 (string) - finds GameObject by name. It may find a wrong GameObject."
          },
          "destroyComponentRefs": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "instanceID": {
                  "type": "integer"
                },
                "index": {
                  "type": "integer"
                },
                "typeName": {
                  "type": "string"
                }
              }
            },
            "description": "Component reference. Used to find Component at GameObject.\nUse one of the following properties:\n1. \u0027instanceID\u0027 (int) - recommended. It finds the exact Component. Default value is 0.\n2. \u0027index\u0027 (int) - finds Component by index. It may find a wrong Component. Default value is -1.\n3. \u0027name\u0027 (string) - finds Component by name. It may find a wrong Component. Default value is null."
          }
        },
        "required": [
          "gameObjectRef",
          "destroyComponentRefs"
        ]
      }
    },
    {
      "name": "GameObject_Duplicate",
      "description": "Duplicate GameObjects in opened Prefab or in a Scene.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "gameObjectRefs": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "instanceID": {
                  "type": "integer"
                },
                "path": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            },
            "description": "GameObject references. Used to specify GameObjects in opened Prefab or in a Scene.\nUse one of the following properties:\n1. \u0027instanceID\u0027 (int) - recommended. It finds the exact GameObject.\n2. \u0027path\u0027 (string) - finds GameObject by path. It may find a wrong GameObject.\n3. \u0027name\u0027 (string) - finds GameObject by name. It may find a wrong GameObject."
          }
        },
        "required": [
          "gameObjectRefs"
        ]
      }
    },
    {
      "name": "GameObject_Find",
      "description": "Finds specific GameObject by provided information.\nFirst it looks for the opened Prefab, if any Prefab is opened it looks only there ignoring a scene.\nIf no opened Prefab it looks into current active scene.\nReturns GameObject information and its children.\nAlso, it returns Components preview just for the target GameObject.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "gameObjectRef": {
            "type": "object",
            "properties": {
              "instanceID": {
                "type": "integer"
              },
              "path": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "GameObject reference. Used to find GameObject in opened Prefab or in a Scene.\nUse one of the following properties:\n1. \u0027instanceID\u0027 (int) - recommended. It finds the exact GameObject.\n2. \u0027path\u0027 (string) - finds GameObject by path. It may find a wrong GameObject.\n3. \u0027name\u0027 (string) - finds GameObject by name. It may find a wrong GameObject."
          },
          "includeChildrenDepth": {
            "type": "integer",
            "description": "Determines the depth of the hierarchy to include. 0 - means only the target GameObject. 1 - means to include one layer below."
          },
          "briefData": {
            "type": "boolean",
            "description": "If true, it will print only brief data of the target GameObject."
          }
        },
        "required": [
          "gameObjectRef"
        ]
      }
    },
    {
      "name": "GameObject_Modify",
      "description": "Modify GameObjects and/or attached component\u0027s field and properties.\nYou can modify multiple GameObjects at once. Just provide the same number of GameObject references and SerializedMember objects.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "gameObjectDiffs": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "typeName": {
                  "type": "string",
                  "description": "Full type name. Eg: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.Vector3\u0027, etc."
                },
                "name": {
                  "type": "string"
                },
                "value": {
                  "type": "object"
                },
                "fields": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "typeName": {
                        "type": "string",
                        "description": "Full type name. Eg: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.Vector3\u0027, etc."
                      },
                      "name": {
                        "type": "string"
                      },
                      "value": {
                        "type": "object"
                      },
                      "fields": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      },
                      "props": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "required": [
                      "typeName",
                      "name",
                      "value"
                    ]
                  }
                },
                "props": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "typeName": {
                        "type": "string",
                        "description": "Full type name. Eg: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.Vector3\u0027, etc."
                      },
                      "name": {
                        "type": "string"
                      },
                      "value": {
                        "type": "object"
                      },
                      "fields": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      },
                      "props": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "required": [
                      "typeName",
                      "name",
                      "value"
                    ]
                  }
                }
              },
              "required": [
                "typeName",
                "value"
              ]
            },
            "description": "Json Object with required readonly \u0027instanceID\u0027 and \u0027type\u0027 fields.\nEach field and property requires to have \u0027type\u0027 and \u0027name\u0027 fields to identify the exact modification target.\nFollow the object schema to specify what to change, ignore values that should not be modified. Keep the original data structure.\nAny unknown or wrong located fields and properties will be ignored.\nCheck the result of this command to see what was changed. The ignored fields and properties will be listed."
          },
          "gameObjectRefs": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "instanceID": {
                  "type": "integer"
                },
                "path": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            },
            "description": "GameObject references. Used to specify GameObjects in opened Prefab or in a Scene.\nUse one of the following properties:\n1. \u0027instanceID\u0027 (int) - recommended. It finds the exact GameObject.\n2. \u0027path\u0027 (string) - finds GameObject by path. It may find a wrong GameObject.\n3. \u0027name\u0027 (string) - finds GameObject by name. It may find a wrong GameObject."
          }
        },
        "required": [
          "gameObjectDiffs",
          "gameObjectRefs"
        ]
      }
    },
    {
      "name": "GameObject_SetParent",
      "description": "Set GameObjects in opened Prefab or in a Scene by \u0027instanceID\u0027 (int) array.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "gameObjectRefs": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "instanceID": {
                  "type": "integer"
                },
                "path": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            },
            "description": "GameObject references. Used to specify GameObjects in opened Prefab or in a Scene.\nUse one of the following properties:\n1. \u0027instanceID\u0027 (int) - recommended. It finds the exact GameObject.\n2. \u0027path\u0027 (string) - finds GameObject by path. It may find a wrong GameObject.\n3. \u0027name\u0027 (string) - finds GameObject by name. It may find a wrong GameObject."
          },
          "parentGameObjectRef": {
            "type": "object",
            "properties": {
              "instanceID": {
                "type": "integer"
              },
              "path": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "GameObject reference. Used to find GameObject in opened Prefab or in a Scene.\nUse one of the following properties:\n1. \u0027instanceID\u0027 (int) - recommended. It finds the exact GameObject.\n2. \u0027path\u0027 (string) - finds GameObject by path. It may find a wrong GameObject.\n3. \u0027name\u0027 (string) - finds GameObject by name. It may find a wrong GameObject."
          },
          "worldPositionStays": {
            "type": "boolean",
            "description": "A boolean flag indicating whether the GameObject\u0027s world position should remain unchanged when setting its parent."
          }
        },
        "required": [
          "gameObjectRefs",
          "parentGameObjectRef"
        ]
      }
    },
    {
      "name": "Reflection_MethodCall",
      "description": "Call C# method. Any method could be called, even private methods.\nIt requires to receive proper method schema.\nUse \u0027Reflection_MethodFind\u0027 to find available method before using it.\nReceives input parameters and returns result.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "object",
            "properties": {
              "namespace": {
                "type": "string"
              },
              "typeName": {
                "type": "string"
              },
              "methodName": {
                "type": "string"
              },
              "inputParameters": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "typeName": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Method reference. Used to find method in codebase of the project.\n\u0027namespace\u0027 (string) - namespace of the class. It may be empty if the class is in the global namespace or the namespace is unknown.\n\u0027typeName\u0027 (string) - class name. Or substring of the class name.\n\u0027methodName\u0027 (string) - method name. Or substring of the method name.\n\u0027inputParameters\u0027 (List\u003CParameter\u003E) - list of parameters. Each parameter is represented by a \u0027Parameter\u0027 object.\n\n\u0027Parameter\u0027 object contains two fields:\n\u0027typeName\u0027 (string) - type of the parameter including namespace. Sample: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.GameObject\u0027, etc.\n\u0027name\u0027 (string) - name of the parameter. It may be empty if the name is unknown."
          },
          "knownNamespace": {
            "type": "boolean",
            "description": "Set to true if \u0027Namespace\u0027 is known and full namespace name is specified in the \u0027filter.Namespace\u0027 property. Otherwise, set to false."
          },
          "typeNameMatchLevel": {
            "type": "integer",
            "description": "Minimal match level for \u0027typeName\u0027.\n0 - ignore \u0027filter.typeName\u0027,\n1 - contains ignoring case (default value),\n2 - contains case sensitive,\n3 - starts with ignoring case,\n4 - starts with case sensitive,\n5 - equals ignoring case,\n6 - equals case sensitive."
          },
          "methodNameMatchLevel": {
            "type": "integer",
            "description": "Minimal match level for \u0027MethodName\u0027.\n0 - ignore \u0027filter.MethodName\u0027,\n1 - contains ignoring case (default value),\n2 - contains case sensitive,\n3 - starts with ignoring case,\n4 - starts with case sensitive,\n5 - equals ignoring case,\n6 - equals case sensitive."
          },
          "parametersMatchLevel": {
            "type": "integer",
            "description": "Minimal match level for \u0027Parameters\u0027.\n0 - ignore \u0027filter.Parameters\u0027,\n1 - parameters count is the same,\n2 - equals (default value)."
          },
          "targetObject": {
            "type": "object",
            "properties": {
              "typeName": {
                "type": "string",
                "description": "Full type name. Eg: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.Vector3\u0027, etc."
              },
              "name": {
                "type": "string"
              },
              "value": {
                "type": "object"
              },
              "fields": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "typeName": {
                      "type": "string",
                      "description": "Full type name. Eg: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.Vector3\u0027, etc."
                    },
                    "name": {
                      "type": "string"
                    },
                    "value": {
                      "type": "object"
                    },
                    "fields": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "props": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  },
                  "required": [
                    "typeName",
                    "name",
                    "value"
                  ]
                }
              },
              "props": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "typeName": {
                      "type": "string",
                      "description": "Full type name. Eg: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.Vector3\u0027, etc."
                    },
                    "name": {
                      "type": "string"
                    },
                    "value": {
                      "type": "object"
                    },
                    "fields": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "props": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  },
                  "required": [
                    "typeName",
                    "name",
                    "value"
                  ]
                }
              }
            },
            "required": [
              "typeName",
              "value"
            ],
            "description": "Specify target object to call method on. Should be null if the method is static or if the is no specific target instance.\nNew instance of the specified class will be created if the method is instance method and the targetObject is null.\nRequired:\n- type - full type name of the object to call method on.\n- value - serialized object value. It will be deserialized to the specified type."
          },
          "inputParameters": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "typeName": {
                  "type": "string",
                  "description": "Full type name. Eg: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.Vector3\u0027, etc."
                },
                "name": {
                  "type": "string"
                },
                "value": {
                  "type": "object"
                },
                "fields": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "typeName": {
                        "type": "string",
                        "description": "Full type name. Eg: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.Vector3\u0027, etc."
                      },
                      "name": {
                        "type": "string"
                      },
                      "value": {
                        "type": "object"
                      },
                      "fields": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      },
                      "props": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "required": [
                      "typeName",
                      "name",
                      "value"
                    ]
                  }
                },
                "props": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "typeName": {
                        "type": "string",
                        "description": "Full type name. Eg: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.Vector3\u0027, etc."
                      },
                      "name": {
                        "type": "string"
                      },
                      "value": {
                        "type": "object"
                      },
                      "fields": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      },
                      "props": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "required": [
                      "typeName",
                      "name",
                      "value"
                    ]
                  }
                }
              },
              "required": [
                "typeName",
                "value"
              ]
            },
            "description": "Method input parameters. Per each parameter specify:\n- type - full type name of the object to call method on.\n- name - parameter name.\n- value - serialized object value. It will be deserialized to the specified type."
          },
          "executeInMainThread": {
            "type": "boolean",
            "description": "Set to true if the method should be executed in the main thread. Otherwise, set to false."
          }
        },
        "required": [
          "filter"
        ]
      }
    },
    {
      "name": "Reflection_MethodFind",
      "description": "Find method in the project using C# Reflection.\nIt looks for all assemblies in the project and finds method by its name, class name and parameters.\nEven private methods are available. Use \u0027Reflection_MethodCall\u0027 to call the method after finding it.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "object",
            "properties": {
              "namespace": {
                "type": "string"
              },
              "typeName": {
                "type": "string"
              },
              "methodName": {
                "type": "string"
              },
              "inputParameters": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "typeName": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Method reference. Used to find method in codebase of the project.\n\u0027namespace\u0027 (string) - namespace of the class. It may be empty if the class is in the global namespace or the namespace is unknown.\n\u0027typeName\u0027 (string) - class name. Or substring of the class name.\n\u0027methodName\u0027 (string) - method name. Or substring of the method name.\n\u0027inputParameters\u0027 (List\u003CParameter\u003E) - list of parameters. Each parameter is represented by a \u0027Parameter\u0027 object.\n\n\u0027Parameter\u0027 object contains two fields:\n\u0027typeName\u0027 (string) - type of the parameter including namespace. Sample: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.GameObject\u0027, etc.\n\u0027name\u0027 (string) - name of the parameter. It may be empty if the name is unknown."
          },
          "knownNamespace": {
            "type": "boolean",
            "description": "Set to true if \u0027Namespace\u0027 is known and full namespace name is specified in the \u0027filter.Namespace\u0027 property. Otherwise, set to false."
          },
          "typeNameMatchLevel": {
            "type": "integer",
            "description": "Minimal match level for \u0027typeName\u0027.\n0 - ignore \u0027filter.typeName\u0027,\n1 - contains ignoring case (default value),\n2 - contains case sensitive,\n3 - starts with ignoring case,\n4 - starts with case sensitive,\n5 - equals ignoring case,\n6 - equals case sensitive."
          },
          "methodNameMatchLevel": {
            "type": "integer",
            "description": "Minimal match level for \u0027MethodName\u0027.\n0 - ignore \u0027filter.MethodName\u0027,\n1 - contains ignoring case (default value),\n2 - contains case sensitive,\n3 - starts with ignoring case,\n4 - starts with case sensitive,\n5 - equals ignoring case,\n6 - equals case sensitive."
          },
          "parametersMatchLevel": {
            "type": "integer",
            "description": "Minimal match level for \u0027Parameters\u0027.\n0 - ignore \u0027filter.Parameters\u0027 (default value),\n1 - parameters count is the same,\n2 - equals."
          }
        },
        "required": [
          "filter"
        ]
      }
    },
    {
      "name": "Scene_Create",
      "description": "Create new scene in the project assets.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Path to the scene file."
          }
        },
        "required": [
          "path"
        ]
      }
    },
    {
      "name": "Scene_GetHierarchy",
      "description": "This tool retrieves the list of root GameObjects in the specified scene.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "includeChildrenDepth": {
            "type": "integer",
            "description": "Determines the depth of the hierarchy to include."
          },
          "loadedSceneName": {
            "type": "string",
            "description": "Name of the loaded scene. If empty string, the active scene will be used."
          }
        },
        "required": []
      }
    },
    {
      "name": "Scene_GetLoaded",
      "description": "Returns the list of currently loaded scenes.",
      "inputSchema": {
        "type": "object"
      }
    },
    {
      "name": "Scene_Load",
      "description": "Load scene from the project assets.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Path to the scene file."
          },
          "loadSceneMode": {
            "type": "integer",
            "description": "Load scene mode. 0 - Single, 1 - Additive."
          }
        },
        "required": [
          "path"
        ]
      }
    },
    {
      "name": "Scene_Save",
      "description": "Save scene from the project assets.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Path to the scene file."
          },
          "targetSceneName": {
            "type": "string",
            "description": "Name of the opened scene. Could be empty if need to save current active scene. It is helpful when multiple scenes are opened."
          }
        },
        "required": [
          "path"
        ]
      }
    },
    {
      "name": "Scene_Unload",
      "description": "Destroys all GameObjects associated with the given Scene and removes the Scene from the SceneManager.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the loaded scene."
          }
        },
        "required": [
          "name"
        ]
      }
    },
    {
      "name": "Script_Delete",
      "description": "Delete the script file. Does AssetDatabase.Refresh() at the end.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "filePath": {
            "type": "string",
            "description": "The path to the file. Sample: \u0022Assets/Scripts/MyScript.cs\u0022."
          }
        },
        "required": [
          "filePath"
        ]
      }
    },
    {
      "name": "Script_Read",
      "description": "Reads the content of a script file and returns it as a string.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "filePath": {
            "type": "string",
            "description": "The path to the file. Sample: \u0022Assets/Scripts/MyScript.cs\u0022."
          }
        },
        "required": [
          "filePath"
        ]
      }
    },
    {
      "name": "Script_CreateOrUpdate",
      "description": "Creates or updates a script file with the provided content. Does AssetDatabase.Refresh() at the end.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "filePath": {
            "type": "string",
            "description": "The path to the file. Sample: \u0022Assets/Scripts/MyScript.cs\u0022."
          },
          "content": {
            "type": "string",
            "description": "C# code - content of the file."
          }
        },
        "required": [
          "filePath",
          "content"
        ]
      }
    }
  ]
} 
2025-06-03 22:22:23.7462 | DEBUG | ModelContextProtocol.Server.McpServer | Sending message to Server (com.IvanMurzak.Unity.MCP.Server 1.0.0.0), Client (claude-ai 0.1.0): {"jsonrpc":"2.0","method":"notifications/tools/list_changed"} 
2025-06-03 22:22:23.7462 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport sending message for Server (stream) (com.IvanMurzak.Unity.MCP.Server) with ID (no id), JSON (null) 
2025-06-03 22:22:23.7462 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport message sent for Server (stream) (com.IvanMurzak.Unity.MCP.Server) with ID (no id) 
2025-06-03 22:22:23.7462 | INFO  | ModelContextProtocol.Server.McpServer | Request handler completed for Server (com.IvanMurzak.Unity.MCP.Server 1.0.0.0), Client (claude-ai 0.1.0) with method tools/list 
2025-06-03 22:22:23.7462 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport sending message for Server (stream) (com.IvanMurzak.Unity.MCP.Server) with ID 5, JSON (null) 
2025-06-03 22:22:23.7462 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport message sent for Server (stream) (com.IvanMurzak.Unity.MCP.Server) with ID 5 
2025-06-03 22:22:23.7462 | TRACE | com.IvanMurzak.Unity.MCP.Server.ToolRouter | ListAll, result: {
  "tools": [
    {
      "name": "Assets_Copy",
      "description": "Copy the asset at path and stores it at newPath. Does AssetDatabase.Refresh() at the end.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "sourcePaths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The paths of the asset to copy."
          },
          "destinationPaths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The paths to store the copied asset."
          }
        },
        "required": [
          "sourcePaths",
          "destinationPaths"
        ]
      }
    },
    {
      "name": "Assets_CreateFolders",
      "description": "Create folders at specific locations in the project.\nUse it to organize scripts and assets in the project. Does AssetDatabase.Refresh() at the end.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "paths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The paths for the folders to create."
          }
        },
        "required": [
          "paths"
        ]
      }
    },
    {
      "name": "Assets_Delete",
      "description": "Delete the assets at paths from the project. Does AssetDatabase.Refresh() at the end.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "paths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The paths of the assets"
          }
        },
        "required": [
          "paths"
        ]
      }
    },
    {
      "name": "Assets_Find",
      "description": "Search the asset database using the search filter string.\nAvailable types:\nt:AnimationClip\nt:AudioClip\nt:AudioMixer\nt:ComputeShader\nt:Font\nt:GUISkin\nt:Material\nt:Mesh\nt:Model\nt:PhysicMaterial\nt:Prefab\nt:Scene\nt:Script\nt:Shader\nt:Sprite\nt:Texture\nt:VideoClip\nt:VisualEffectAsset\nt:VisualEffectSubgraph",
      "inputSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "description": "Searching filter. Could be empty.\nName: Filter assets by their filename (without extension). Words separated by whitespace are treated as separate name searches. For example, \u0027test asset\u0027 is a name of an Asset which will be searched for. Note that the name can be used to identify an asset. Further, the name used in the filter string can be specified as a subsection. For example, the \u0027test asset\u0027 example above can be matched using \u0027test\u0027.\nLabels (l:): Assets can have labels attached to them. Assets with particular labels can be found using the keyword \u0027l:\u0027 before each label. This indicates that the string is searching for labels.\nTypes (t:): Find assets based on explicitly identified types. The keyword \u0027t:\u0027 is used as a way to specify that typed assets are being looked for. If more than one type is included in the filter string, then assets that match one class will be returned. Types can either be built-in types such as Texture2D or user-created script classes. User-created classes are assets created from a ScriptableObject class in the project. If all assets are wanted, use Object as all assets derive from Object. Specifying one or more folders using the searchInFolders argument will limit the searching to these folders and their child folders. This is faster than searching all assets in all folders.\nAssetBundles (b:): Find assets which are part of an Asset bundle. The keyword \u0027b:\u0027 is used to determine that Asset bundle names should be part of the query.\nArea (a:): Find assets in a specific area of a project. Valid values are \u0027all\u0027, \u0027assets\u0027, and \u0027packages\u0027. Use this to make your query more specific using the \u0027a:\u0027 keyword followed by the area name to speed up searching.\nGlobbing (glob:): Use globbing to match specific rules. The keyword \u0027glob:\u0027 is followed by the query. For example, \u0027glob:Editor\u0027 will find all Editor folders in a project, \u0027glob:(Editor|Resources)\u0027 will find all Editor and Resources folders in a project, \u0027glob:Editor/*\u0027 will return all Assets inside Editor folders in a project, while \u0027glob:Editor/**\u0027 will return all Assets within Editor folders recursively.\n\nNote:\nSearching is case insensitive."
          },
          "searchInFolders": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The folders where the search will start. If null, the search will be performed in all folders."
          }
        },
        "required": []
      }
    },
    {
      "name": "Assets_Material_Create",
      "description": "Create new material asset with default parameters. Right \u0027shaderName\u0027 should be set. To find the shader, use \u0027Shader.Find\u0027 method.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "assetPath": {
            "type": "string",
            "description": "Asset path. Starts with \u0027Assets/\u0027. Ends with \u0027.mat\u0027."
          },
          "shaderName": {
            "type": "string",
            "description": "Name of the shader that need to be used to create the material."
          }
        },
        "required": [
          "assetPath",
          "shaderName"
        ]
      }
    },
    {
      "name": "Assets_Modify",
      "description": "Modify asset in the project. Not allowed to modify asset in \u0027Packages/\u0027 folder. Please modify it in \u0027Assets/\u0027 folder.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "content": {
            "type": "object",
            "properties": {
              "typeName": {
                "type": "string",
                "description": "Full type name. Eg: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.Vector3\u0027, etc."
              },
              "name": {
                "type": "string"
              },
              "value": {
                "type": "object"
              },
              "fields": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "typeName": {
                      "type": "string",
                      "description": "Full type name. Eg: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.Vector3\u0027, etc."
                    },
                    "name": {
                      "type": "string"
                    },
                    "value": {
                      "type": "object"
                    },
                    "fields": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "props": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  },
                  "required": [
                    "typeName",
                    "name",
                    "value"
                  ]
                }
              },
              "props": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "typeName": {
                      "type": "string",
                      "description": "Full type name. Eg: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.Vector3\u0027, etc."
                    },
                    "name": {
                      "type": "string"
                    },
                    "value": {
                      "type": "object"
                    },
                    "fields": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "props": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  },
                  "required": [
                    "typeName",
                    "name",
                    "value"
                  ]
                }
              }
            },
            "required": [
              "typeName",
              "value"
            ],
            "description": "The asset content. It overrides the existing asset content."
          },
          "assetPath": {
            "type": "string",
            "description": "Path to the asset. See \u0027Assets_Search\u0027 for more details. Starts with \u0027Assets/\u0027. Priority: 1. (Recommended)"
          },
          "assetGuid": {
            "type": "string",
            "description": "GUID of the asset. Priority: 2."
          }
        },
        "required": [
          "content"
        ]
      }
    },
    {
      "name": "Assets_Move",
      "description": "Move the assets at paths in the project. Should be used for asset rename. Does AssetDatabase.Refresh() at the end.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "sourcePaths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The paths of the assets to move."
          },
          "destinationPaths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The paths of moved assets."
          }
        },
        "required": [
          "sourcePaths",
          "destinationPaths"
        ]
      }
    },
    {
      "name": "Assets_Read",
      "description": "Read file asset in the project.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "assetPath": {
            "type": "string",
            "description": "Path to the asset. See \u0027Assets_Search\u0027 for more details. Starts with \u0027Assets/\u0027. Priority: 1. (Recommended)"
          },
          "assetGuid": {
            "type": "string",
            "description": "GUID of the asset. Priority: 2."
          }
        },
        "required": []
      }
    },
    {
      "name": "Assets_Refresh",
      "description": "Refreshes the AssetDatabase. Use it if any new files were added or updated in the project outside of Unity API.\nDon\u0027t need to call it for Scripts manipulations.\nIt also triggers scripts recompilation if any changes in \u0027.cs\u0027 files.",
      "inputSchema": {
        "type": "object"
      }
    },
    {
      "name": "Assets_Prefab_Close",
      "description": "Close a prefab. Use it when you are in prefab editing mode in Unity Editor.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "save": {
            "type": "boolean",
            "description": "True to save prefab. False to discard changes."
          }
        },
        "required": []
      }
    },
    {
      "name": "Assets_Prefab_Create",
      "description": "Create a prefab from a GameObject in a scene. The prefab will be saved in the project assets at the specified path.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "prefabAssetPath": {
            "type": "string",
            "description": "Prefab asset path. Should be in the format \u0027Assets/Path/To/Prefab.prefab\u0027."
          },
          "instanceID": {
            "type": "integer",
            "description": "\u0027instanceID\u0027 of GameObject in a scene."
          },
          "replaceGameObjectWithPrefab": {
            "type": "boolean",
            "description": "If true, the prefab will replace the GameObject in the scene."
          }
        },
        "required": [
          "prefabAssetPath",
          "instanceID"
        ]
      }
    },
    {
      "name": "Assets_Prefab_Instantiate",
      "description": "Instantiates prefab in a scene.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "prefabAssetPath": {
            "type": "string",
            "description": "Prefab asset path."
          },
          "gameObjectPath": {
            "type": "string",
            "description": "GameObject path in the current active scene."
          },
          "position": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number"
              },
              "y": {
                "type": "number"
              },
              "z": {
                "type": "number"
              }
            },
            "required": [
              "x",
              "y",
              "z"
            ],
            "description": "Transform position of the GameObject."
          },
          "rotation": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number"
              },
              "y": {
                "type": "number"
              },
              "z": {
                "type": "number"
              }
            },
            "required": [
              "x",
              "y",
              "z"
            ],
            "description": "Transform rotation of the GameObject. Euler angles in degrees."
          },
          "scale": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number"
              },
              "y": {
                "type": "number"
              },
              "z": {
                "type": "number"
              }
            },
            "required": [
              "x",
              "y",
              "z"
            ],
            "description": "Transform scale of the GameObject."
          },
          "isLocalSpace": {
            "type": "boolean",
            "description": "World or Local space of transform."
          }
        },
        "required": [
          "prefabAssetPath",
          "gameObjectPath"
        ]
      }
    },
    {
      "name": "Assets_Prefab_Open",
      "description": "Open a prefab. There are two options to open prefab:\n1. Open prefab from asset using \u0027prefabAssetPath\u0027.\n2. Open prefab from GameObject in loaded scene using \u0027instanceID\u0027 of the GameObject.\n   The GameObject should be connected to a prefab.\n\nNote: Please \u0027Close\u0027 the prefab later to exit prefab editing mode.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "instanceID": {
            "type": "integer",
            "description": "\u0027instanceID\u0027 of GameObject in a scene."
          },
          "prefabAssetPath": {
            "type": "string",
            "description": "Prefab asset path. Should be in the format \u0027Assets/Path/To/Prefab.prefab\u0027."
          }
        },
        "required": []
      }
    },
    {
      "name": "Assets_Prefab_Read",
      "description": "Read a prefab content. Use it for get started with prefab editing. There are two options to open prefab:\n1. Read prefab from asset using \u0027prefabAssetPath\u0027.\n2. Read prefab from GameObject in loaded scene using \u0027instanceID\u0027 of the GameObject.\n   The GameObject should be connected to a prefab.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "instanceID": {
            "type": "integer",
            "description": "\u0027instanceID\u0027 of GameObject in a scene."
          },
          "prefabAssetPath": {
            "type": "string",
            "description": "Prefab asset path. Should be in the format \u0027Assets/Path/To/Prefab.prefab\u0027."
          },
          "includeChildrenDepth": {
            "type": "integer",
            "description": "Determines the depth of the hierarchy to include. 0 - means only the target GameObject. 1 - means to include one layer below."
          }
        },
        "required": []
      }
    },
    {
      "name": "Assets_Prefab_Save",
      "description": "Save a prefab. Use it when you are in prefab editing mode in Unity Editor.",
      "inputSchema": {
        "type": "object"
      }
    },
    {
      "name": "Assets_Shader_ListAll",
      "description": "Scans the project assets to find all shaders and to get the name from each of them. Returns the list of shader names.",
      "inputSchema": {
        "type": "object"
      }
    },
    {
      "name": "Component_GetAll",
      "description": "Returns the list of all available components in the project.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "search": {
            "type": "string",
            "description": "Substring for searching components. Could be empty."
          }
        },
        "required": []
      }
    },
    {
      "name": "Editor_GetApplicationInformation",
      "description": "Returns list of available information about \u0027UnityEditor.EditorApplication\u0027.\nUse it to get information about the current state of the Unity Editor application. Such as: playmode, paused state, compilation state, etc.\nEditorApplication.isPlaying - Whether the Editor is in Play mode.\nEditorApplication.isPaused - Whether the Editor is paused.\nEditorApplication.isCompiling - Is editor currently compiling scripts? (Read Only)\nEditorApplication.isPlayingOrWillChangePlaymode - Editor application state which is true only when the Editor is currently in or about to enter Play mode. (Read Only)\nEditorApplication.isUpdating - True if the Editor is currently refreshing the AssetDatabase. (Read Only)\nEditorApplication.applicationContentsPath - Path to the Unity editor contents folder. (Read Only)\nEditorApplication.applicationPath - Gets the path to the Unity Editor application. (Read Only)\nEditorApplication.timeSinceStartup - The time since the editor was started. (Read Only)",
      "inputSchema": {
        "type": "object"
      }
    },
    {
      "name": "Editor_SetApplicationState",
      "description": "Control the Unity Editor application state. You can start, stop, or pause the \u0027playmode\u0027.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "isPlaying": {
            "type": "boolean",
            "description": "If true, the \u0027playmode\u0027 will be started. If false, the \u0027playmode\u0027 will be stopped."
          },
          "isPaused": {
            "type": "boolean",
            "description": "If true, the \u0027playmode\u0027 will be paused. If false, the \u0027playmode\u0027 will be resumed."
          }
        },
        "required": []
      }
    },
    {
      "name": "Editor_Selection_Get",
      "description": "\u0027UnityEditor.Selection\u0027. Access to the selection in the editor.\nUse it to get information about selected Assets or GameObjects in a scene.\nSelection.transforms - Returns the top level selection instanceIDs, excluding Prefabs.\nSelection.instanceIDs - The actual unfiltered selection from the Scene returned as instance ids instead of objects.\nSelection.gameObjects - Returns the actual game object selection. Includes Prefabs, non-modifiable objects. (Read Only)\nSelection.assetGUIDs - Returns the guids of the selected assets. (Read Only)\nSelection.activeGameObject - Returns the active game object. (The one shown in the inspector). (Read Only)\nSelection.activeInstanceID - Returns the instanceID of the actual object selection. Includes Prefabs, non-modifiable objects.\nSelection.activeObject - Returns the actual object selection. Includes Prefabs, non-modifiable objects.\nSelection.activeTransform - Returns the active transform. (The one shown in the inspector).",
      "inputSchema": {
        "type": "object"
      }
    },
    {
      "name": "Editor_Selection_Set",
      "description": "\u0027UnityEditor.Selection\u0027. Access to the selection in the editor.\nUse it to select Assets or GameObjects in a scene. Set empty array to clear selection.\nSelection.instanceIDs - The actual unfiltered selection from the Scene returned as instance ids.\nSelection.activeInstanceID -  The \u0027instanceID\u0027 of the actual object selection. Includes Prefabs, non-modifiable objects.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "instanceIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The \u0027instanceID\u0027 array of the target GameObjects."
          },
          "activeInstanceID": {
            "type": "integer",
            "description": "The \u0027instanceID\u0027 of the target Object."
          }
        },
        "required": []
      }
    },
    {
      "name": "GameObject_AddComponent",
      "description": "Add a component to a GameObject.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "componentNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Full name of the Component. It should include full namespace path and the class name."
          },
          "gameObjectRef": {
            "type": "object",
            "properties": {
              "instanceID": {
                "type": "integer"
              },
              "path": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "GameObject reference. Used to find GameObject in opened Prefab or in a Scene.\nUse one of the following properties:\n1. \u0027instanceID\u0027 (int) - recommended. It finds the exact GameObject.\n2. \u0027path\u0027 (string) - finds GameObject by path. It may find a wrong GameObject.\n3. \u0027name\u0027 (string) - finds GameObject by name. It may find a wrong GameObject."
          }
        },
        "required": [
          "componentNames",
          "gameObjectRef"
        ]
      }
    },
    {
      "name": "GameObject_Create",
      "description": "Create a new GameObject at specific path.\nif needed - provide proper \u0027position\u0027, \u0027rotation\u0027 and \u0027scale\u0027 to reduce amount of operations.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the new GameObject."
          },
          "parentGameObjectRef": {
            "type": "object",
            "properties": {
              "instanceID": {
                "type": "integer"
              },
              "path": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "GameObject reference. Used to find GameObject in opened Prefab or in a Scene.\nUse one of the following properties:\n1. \u0027instanceID\u0027 (int) - recommended. It finds the exact GameObject.\n2. \u0027path\u0027 (string) - finds GameObject by path. It may find a wrong GameObject.\n3. \u0027name\u0027 (string) - finds GameObject by name. It may find a wrong GameObject."
          },
          "position": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number"
              },
              "y": {
                "type": "number"
              },
              "z": {
                "type": "number"
              }
            },
            "required": [
              "x",
              "y",
              "z"
            ],
            "description": "Transform position of the GameObject."
          },
          "rotation": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number"
              },
              "y": {
                "type": "number"
              },
              "z": {
                "type": "number"
              }
            },
            "required": [
              "x",
              "y",
              "z"
            ],
            "description": "Transform rotation of the GameObject. Euler angles in degrees."
          },
          "scale": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number"
              },
              "y": {
                "type": "number"
              },
              "z": {
                "type": "number"
              }
            },
            "required": [
              "x",
              "y",
              "z"
            ],
            "description": "Transform scale of the GameObject."
          },
          "isLocalSpace": {
            "type": "boolean",
            "description": "World or Local space of transform."
          },
          "primitiveType": {
            "type": "integer",
            "description": "-1 - No primitive type; 0 - Cube; 1 - Sphere; 2 - Capsule; 3 - Cylinder; 4 - Plane; 5 - Quad."
          }
        },
        "required": [
          "name"
        ]
      }
    },
    {
      "name": "GameObject_Destroy",
      "description": "Destroy a GameObject and all nested GameObjects recursively.\nUse \u0027instanceID\u0027 whenever possible, because it finds the exact GameObject, when \u0027path\u0027 may find a wrong one.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "gameObjectRef": {
            "type": "object",
            "properties": {
              "instanceID": {
                "type": "integer"
              },
              "path": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "GameObject reference. Used to find GameObject in opened Prefab or in a Scene.\nUse one of the following properties:\n1. \u0027instanceID\u0027 (int) - recommended. It finds the exact GameObject.\n2. \u0027path\u0027 (string) - finds GameObject by path. It may find a wrong GameObject.\n3. \u0027name\u0027 (string) - finds GameObject by name. It may find a wrong GameObject."
          }
        },
        "required": [
          "gameObjectRef"
        ]
      }
    },
    {
      "name": "GameObject_DestroyComponents",
      "description": "Destroy one or many components from target GameObject.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "gameObjectRef": {
            "type": "object",
            "properties": {
              "instanceID": {
                "type": "integer"
              },
              "path": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "GameObject reference. Used to find GameObject in opened Prefab or in a Scene.\nUse one of the following properties:\n1. \u0027instanceID\u0027 (int) - recommended. It finds the exact GameObject.\n2. \u0027path\u0027 (string) - finds GameObject by path. It may find a wrong GameObject.\n3. \u0027name\u0027 (string) - finds GameObject by name. It may find a wrong GameObject."
          },
          "destroyComponentRefs": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "instanceID": {
                  "type": "integer"
                },
                "index": {
                  "type": "integer"
                },
                "typeName": {
                  "type": "string"
                }
              }
            },
            "description": "Component reference. Used to find Component at GameObject.\nUse one of the following properties:\n1. \u0027instanceID\u0027 (int) - recommended. It finds the exact Component. Default value is 0.\n2. \u0027index\u0027 (int) - finds Component by index. It may find a wrong Component. Default value is -1.\n3. \u0027name\u0027 (string) - finds Component by name. It may find a wrong Component. Default value is null."
          }
        },
        "required": [
          "gameObjectRef",
          "destroyComponentRefs"
        ]
      }
    },
    {
      "name": "GameObject_Duplicate",
      "description": "Duplicate GameObjects in opened Prefab or in a Scene.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "gameObjectRefs": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "instanceID": {
                  "type": "integer"
                },
                "path": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            },
            "description": "GameObject references. Used to specify GameObjects in opened Prefab or in a Scene.\nUse one of the following properties:\n1. \u0027instanceID\u0027 (int) - recommended. It finds the exact GameObject.\n2. \u0027path\u0027 (string) - finds GameObject by path. It may find a wrong GameObject.\n3. \u0027name\u0027 (string) - finds GameObject by name. It may find a wrong GameObject."
          }
        },
        "required": [
          "gameObjectRefs"
        ]
      }
    },
    {
      "name": "GameObject_Find",
      "description": "Finds specific GameObject by provided information.\nFirst it looks for the opened Prefab, if any Prefab is opened it looks only there ignoring a scene.\nIf no opened Prefab it looks into current active scene.\nReturns GameObject information and its children.\nAlso, it returns Components preview just for the target GameObject.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "gameObjectRef": {
            "type": "object",
            "properties": {
              "instanceID": {
                "type": "integer"
              },
              "path": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "GameObject reference. Used to find GameObject in opened Prefab or in a Scene.\nUse one of the following properties:\n1. \u0027instanceID\u0027 (int) - recommended. It finds the exact GameObject.\n2. \u0027path\u0027 (string) - finds GameObject by path. It may find a wrong GameObject.\n3. \u0027name\u0027 (string) - finds GameObject by name. It may find a wrong GameObject."
          },
          "includeChildrenDepth": {
            "type": "integer",
            "description": "Determines the depth of the hierarchy to include. 0 - means only the target GameObject. 1 - means to include one layer below."
          },
          "briefData": {
            "type": "boolean",
            "description": "If true, it will print only brief data of the target GameObject."
          }
        },
        "required": [
          "gameObjectRef"
        ]
      }
    },
    {
      "name": "GameObject_Modify",
      "description": "Modify GameObjects and/or attached component\u0027s field and properties.\nYou can modify multiple GameObjects at once. Just provide the same number of GameObject references and SerializedMember objects.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "gameObjectDiffs": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "typeName": {
                  "type": "string",
                  "description": "Full type name. Eg: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.Vector3\u0027, etc."
                },
                "name": {
                  "type": "string"
                },
                "value": {
                  "type": "object"
                },
                "fields": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "typeName": {
                        "type": "string",
                        "description": "Full type name. Eg: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.Vector3\u0027, etc."
                      },
                      "name": {
                        "type": "string"
                      },
                      "value": {
                        "type": "object"
                      },
                      "fields": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      },
                      "props": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "required": [
                      "typeName",
                      "name",
                      "value"
                    ]
                  }
                },
                "props": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "typeName": {
                        "type": "string",
                        "description": "Full type name. Eg: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.Vector3\u0027, etc."
                      },
                      "name": {
                        "type": "string"
                      },
                      "value": {
                        "type": "object"
                      },
                      "fields": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      },
                      "props": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "required": [
                      "typeName",
                      "name",
                      "value"
                    ]
                  }
                }
              },
              "required": [
                "typeName",
                "value"
              ]
            },
            "description": "Json Object with required readonly \u0027instanceID\u0027 and \u0027type\u0027 fields.\nEach field and property requires to have \u0027type\u0027 and \u0027name\u0027 fields to identify the exact modification target.\nFollow the object schema to specify what to change, ignore values that should not be modified. Keep the original data structure.\nAny unknown or wrong located fields and properties will be ignored.\nCheck the result of this command to see what was changed. The ignored fields and properties will be listed."
          },
          "gameObjectRefs": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "instanceID": {
                  "type": "integer"
                },
                "path": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            },
            "description": "GameObject references. Used to specify GameObjects in opened Prefab or in a Scene.\nUse one of the following properties:\n1. \u0027instanceID\u0027 (int) - recommended. It finds the exact GameObject.\n2. \u0027path\u0027 (string) - finds GameObject by path. It may find a wrong GameObject.\n3. \u0027name\u0027 (string) - finds GameObject by name. It may find a wrong GameObject."
          }
        },
        "required": [
          "gameObjectDiffs",
          "gameObjectRefs"
        ]
      }
    },
    {
      "name": "GameObject_SetParent",
      "description": "Set GameObjects in opened Prefab or in a Scene by \u0027instanceID\u0027 (int) array.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "gameObjectRefs": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "instanceID": {
                  "type": "integer"
                },
                "path": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            },
            "description": "GameObject references. Used to specify GameObjects in opened Prefab or in a Scene.\nUse one of the following properties:\n1. \u0027instanceID\u0027 (int) - recommended. It finds the exact GameObject.\n2. \u0027path\u0027 (string) - finds GameObject by path. It may find a wrong GameObject.\n3. \u0027name\u0027 (string) - finds GameObject by name. It may find a wrong GameObject."
          },
          "parentGameObjectRef": {
            "type": "object",
            "properties": {
              "instanceID": {
                "type": "integer"
              },
              "path": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "GameObject reference. Used to find GameObject in opened Prefab or in a Scene.\nUse one of the following properties:\n1. \u0027instanceID\u0027 (int) - recommended. It finds the exact GameObject.\n2. \u0027path\u0027 (string) - finds GameObject by path. It may find a wrong GameObject.\n3. \u0027name\u0027 (string) - finds GameObject by name. It may find a wrong GameObject."
          },
          "worldPositionStays": {
            "type": "boolean",
            "description": "A boolean flag indicating whether the GameObject\u0027s world position should remain unchanged when setting its parent."
          }
        },
        "required": [
          "gameObjectRefs",
          "parentGameObjectRef"
        ]
      }
    },
    {
      "name": "Reflection_MethodCall",
      "description": "Call C# method. Any method could be called, even private methods.\nIt requires to receive proper method schema.\nUse \u0027Reflection_MethodFind\u0027 to find available method before using it.\nReceives input parameters and returns result.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "object",
            "properties": {
              "namespace": {
                "type": "string"
              },
              "typeName": {
                "type": "string"
              },
              "methodName": {
                "type": "string"
              },
              "inputParameters": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "typeName": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Method reference. Used to find method in codebase of the project.\n\u0027namespace\u0027 (string) - namespace of the class. It may be empty if the class is in the global namespace or the namespace is unknown.\n\u0027typeName\u0027 (string) - class name. Or substring of the class name.\n\u0027methodName\u0027 (string) - method name. Or substring of the method name.\n\u0027inputParameters\u0027 (List\u003CParameter\u003E) - list of parameters. Each parameter is represented by a \u0027Parameter\u0027 object.\n\n\u0027Parameter\u0027 object contains two fields:\n\u0027typeName\u0027 (string) - type of the parameter including namespace. Sample: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.GameObject\u0027, etc.\n\u0027name\u0027 (string) - name of the parameter. It may be empty if the name is unknown."
          },
          "knownNamespace": {
            "type": "boolean",
            "description": "Set to true if \u0027Namespace\u0027 is known and full namespace name is specified in the \u0027filter.Namespace\u0027 property. Otherwise, set to false."
          },
          "typeNameMatchLevel": {
            "type": "integer",
            "description": "Minimal match level for \u0027typeName\u0027.\n0 - ignore \u0027filter.typeName\u0027,\n1 - contains ignoring case (default value),\n2 - contains case sensitive,\n3 - starts with ignoring case,\n4 - starts with case sensitive,\n5 - equals ignoring case,\n6 - equals case sensitive."
          },
          "methodNameMatchLevel": {
            "type": "integer",
            "description": "Minimal match level for \u0027MethodName\u0027.\n0 - ignore \u0027filter.MethodName\u0027,\n1 - contains ignoring case (default value),\n2 - contains case sensitive,\n3 - starts with ignoring case,\n4 - starts with case sensitive,\n5 - equals ignoring case,\n6 - equals case sensitive."
          },
          "parametersMatchLevel": {
            "type": "integer",
            "description": "Minimal match level for \u0027Parameters\u0027.\n0 - ignore \u0027filter.Parameters\u0027,\n1 - parameters count is the same,\n2 - equals (default value)."
          },
          "targetObject": {
            "type": "object",
            "properties": {
              "typeName": {
                "type": "string",
                "description": "Full type name. Eg: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.Vector3\u0027, etc."
              },
              "name": {
                "type": "string"
              },
              "value": {
                "type": "object"
              },
              "fields": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "typeName": {
                      "type": "string",
                      "description": "Full type name. Eg: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.Vector3\u0027, etc."
                    },
                    "name": {
                      "type": "string"
                    },
                    "value": {
                      "type": "object"
                    },
                    "fields": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "props": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  },
                  "required": [
                    "typeName",
                    "name",
                    "value"
                  ]
                }
              },
              "props": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "typeName": {
                      "type": "string",
                      "description": "Full type name. Eg: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.Vector3\u0027, etc."
                    },
                    "name": {
                      "type": "string"
                    },
                    "value": {
                      "type": "object"
                    },
                    "fields": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "props": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  },
                  "required": [
                    "typeName",
                    "name",
                    "value"
                  ]
                }
              }
            },
            "required": [
              "typeName",
              "value"
            ],
            "description": "Specify target object to call method on. Should be null if the method is static or if the is no specific target instance.\nNew instance of the specified class will be created if the method is instance method and the targetObject is null.\nRequired:\n- type - full type name of the object to call method on.\n- value - serialized object value. It will be deserialized to the specified type."
          },
          "inputParameters": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "typeName": {
                  "type": "string",
                  "description": "Full type name. Eg: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.Vector3\u0027, etc."
                },
                "name": {
                  "type": "string"
                },
                "value": {
                  "type": "object"
                },
                "fields": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "typeName": {
                        "type": "string",
                        "description": "Full type name. Eg: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.Vector3\u0027, etc."
                      },
                      "name": {
                        "type": "string"
                      },
                      "value": {
                        "type": "object"
                      },
                      "fields": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      },
                      "props": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "required": [
                      "typeName",
                      "name",
                      "value"
                    ]
                  }
                },
                "props": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "typeName": {
                        "type": "string",
                        "description": "Full type name. Eg: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.Vector3\u0027, etc."
                      },
                      "name": {
                        "type": "string"
                      },
                      "value": {
                        "type": "object"
                      },
                      "fields": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      },
                      "props": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "required": [
                      "typeName",
                      "name",
                      "value"
                    ]
                  }
                }
              },
              "required": [
                "typeName",
                "value"
              ]
            },
            "description": "Method input parameters. Per each parameter specify:\n- type - full type name of the object to call method on.\n- name - parameter name.\n- value - serialized object value. It will be deserialized to the specified type."
          },
          "executeInMainThread": {
            "type": "boolean",
            "description": "Set to true if the method should be executed in the main thread. Otherwise, set to false."
          }
        },
        "required": [
          "filter"
        ]
      }
    },
    {
      "name": "Reflection_MethodFind",
      "description": "Find method in the project using C# Reflection.\nIt looks for all assemblies in the project and finds method by its name, class name and parameters.\nEven private methods are available. Use \u0027Reflection_MethodCall\u0027 to call the method after finding it.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "object",
            "properties": {
              "namespace": {
                "type": "string"
              },
              "typeName": {
                "type": "string"
              },
              "methodName": {
                "type": "string"
              },
              "inputParameters": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "typeName": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Method reference. Used to find method in codebase of the project.\n\u0027namespace\u0027 (string) - namespace of the class. It may be empty if the class is in the global namespace or the namespace is unknown.\n\u0027typeName\u0027 (string) - class name. Or substring of the class name.\n\u0027methodName\u0027 (string) - method name. Or substring of the method name.\n\u0027inputParameters\u0027 (List\u003CParameter\u003E) - list of parameters. Each parameter is represented by a \u0027Parameter\u0027 object.\n\n\u0027Parameter\u0027 object contains two fields:\n\u0027typeName\u0027 (string) - type of the parameter including namespace. Sample: \u0027System.String\u0027, \u0027System.Int32\u0027, \u0027UnityEngine.GameObject\u0027, etc.\n\u0027name\u0027 (string) - name of the parameter. It may be empty if the name is unknown."
          },
          "knownNamespace": {
            "type": "boolean",
            "description": "Set to true if \u0027Namespace\u0027 is known and full namespace name is specified in the \u0027filter.Namespace\u0027 property. Otherwise, set to false."
          },
          "typeNameMatchLevel": {
            "type": "integer",
            "description": "Minimal match level for \u0027typeName\u0027.\n0 - ignore \u0027filter.typeName\u0027,\n1 - contains ignoring case (default value),\n2 - contains case sensitive,\n3 - starts with ignoring case,\n4 - starts with case sensitive,\n5 - equals ignoring case,\n6 - equals case sensitive."
          },
          "methodNameMatchLevel": {
            "type": "integer",
            "description": "Minimal match level for \u0027MethodName\u0027.\n0 - ignore \u0027filter.MethodName\u0027,\n1 - contains ignoring case (default value),\n2 - contains case sensitive,\n3 - starts with ignoring case,\n4 - starts with case sensitive,\n5 - equals ignoring case,\n6 - equals case sensitive."
          },
          "parametersMatchLevel": {
            "type": "integer",
            "description": "Minimal match level for \u0027Parameters\u0027.\n0 - ignore \u0027filter.Parameters\u0027 (default value),\n1 - parameters count is the same,\n2 - equals."
          }
        },
        "required": [
          "filter"
        ]
      }
    },
    {
      "name": "Scene_Create",
      "description": "Create new scene in the project assets.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Path to the scene file."
          }
        },
        "required": [
          "path"
        ]
      }
    },
    {
      "name": "Scene_GetHierarchy",
      "description": "This tool retrieves the list of root GameObjects in the specified scene.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "includeChildrenDepth": {
            "type": "integer",
            "description": "Determines the depth of the hierarchy to include."
          },
          "loadedSceneName": {
            "type": "string",
            "description": "Name of the loaded scene. If empty string, the active scene will be used."
          }
        },
        "required": []
      }
    },
    {
      "name": "Scene_GetLoaded",
      "description": "Returns the list of currently loaded scenes.",
      "inputSchema": {
        "type": "object"
      }
    },
    {
      "name": "Scene_Load",
      "description": "Load scene from the project assets.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Path to the scene file."
          },
          "loadSceneMode": {
            "type": "integer",
            "description": "Load scene mode. 0 - Single, 1 - Additive."
          }
        },
        "required": [
          "path"
        ]
      }
    },
    {
      "name": "Scene_Save",
      "description": "Save scene from the project assets.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Path to the scene file."
          },
          "targetSceneName": {
            "type": "string",
            "description": "Name of the opened scene. Could be empty if need to save current active scene. It is helpful when multiple scenes are opened."
          }
        },
        "required": [
          "path"
        ]
      }
    },
    {
      "name": "Scene_Unload",
      "description": "Destroys all GameObjects associated with the given Scene and removes the Scene from the SceneManager.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the loaded scene."
          }
        },
        "required": [
          "name"
        ]
      }
    },
    {
      "name": "Script_Delete",
      "description": "Delete the script file. Does AssetDatabase.Refresh() at the end.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "filePath": {
            "type": "string",
            "description": "The path to the file. Sample: \u0022Assets/Scripts/MyScript.cs\u0022."
          }
        },
        "required": [
          "filePath"
        ]
      }
    },
    {
      "name": "Script_Read",
      "description": "Reads the content of a script file and returns it as a string.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "filePath": {
            "type": "string",
            "description": "The path to the file. Sample: \u0022Assets/Scripts/MyScript.cs\u0022."
          }
        },
        "required": [
          "filePath"
        ]
      }
    },
    {
      "name": "Script_CreateOrUpdate",
      "description": "Creates or updates a script file with the provided content. Does AssetDatabase.Refresh() at the end.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "filePath": {
            "type": "string",
            "description": "The path to the file. Sample: \u0022Assets/Scripts/MyScript.cs\u0022."
          },
          "content": {
            "type": "string",
            "description": "C# code - content of the file."
          }
        },
        "required": [
          "filePath",
          "content"
        ]
      }
    }
  ]
} 
2025-06-03 22:22:23.7462 | DEBUG | ModelContextProtocol.Server.McpServer | Sending message to Server (com.IvanMurzak.Unity.MCP.Server 1.0.0.0), Client (claude-ai 0.1.0): {"jsonrpc":"2.0","method":"notifications/tools/list_changed"} 
2025-06-03 22:22:23.7462 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport sending message for Server (stream) (com.IvanMurzak.Unity.MCP.Server) with ID (no id), JSON (null) 
2025-06-03 22:22:23.7462 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport message sent for Server (stream) (com.IvanMurzak.Unity.MCP.Server) with ID (no id) 
2025-06-03 22:22:23.7462 | INFO  | ModelContextProtocol.Server.McpServer | Request handler completed for Server (com.IvanMurzak.Unity.MCP.Server 1.0.0.0), Client (claude-ai 0.1.0) with method tools/list 
2025-06-03 22:22:23.7462 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport sending message for Server (stream) (com.IvanMurzak.Unity.MCP.Server) with ID 6, JSON (null) 
2025-06-03 22:22:23.7462 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport message sent for Server (stream) (com.IvanMurzak.Unity.MCP.Server) with ID 6 
2025-06-03 22:24:03.6959 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport end of stream for Server (stream) (com.IvanMurzak.Unity.MCP.Server) 
2025-06-03 22:24:03.6959 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport exiting read messages loop for Server (stream) (com.IvanMurzak.Unity.MCP.Server) 
2025-06-03 22:24:03.6984 | INFO  | ModelContextProtocol.Server.McpServer | Cleaning up endpoint Server (com.IvanMurzak.Unity.MCP.Server 1.0.0.0), Client (claude-ai 0.1.0) 
2025-06-03 22:24:03.6984 | INFO  | ModelContextProtocol.Server.McpServer | Endpoint cleaned up for Server (com.IvanMurzak.Unity.MCP.Server 1.0.0.0), Client (claude-ai 0.1.0) 
2025-06-03 22:24:03.6984 | TRACE | com.IvanMurzak.Unity.MCP.Server.RemoteApp | 89c65a8c-e560-46d4-896d-edef0beebf24 Ctor. 
2025-06-03 22:24:03.6984 | INFO  | com.IvanMurzak.Unity.MCP.Server.RemoteApp | Client 'SHMN8ggbG6281R2igOxy6Q' disconnected from RemoteApp. Total connected clients: 0 
2025-06-03 22:24:03.6984 | DEBUG | com.IvanMurzak.Unity.MCP.Server.Program | Response: 101 
2025-06-03 22:24:03.7146 | TRACE | com.IvanMurzak.Unity.MCP.Server.McpServerService | McpServerService StopAsync. 
2025-06-03 22:24:03.7146 | TRACE | com.IvanMurzak.Unity.MCP.Server.RemoteToolRunner | Dispose. 
2025-06-03 22:24:03.7146 | TRACE | com.IvanMurzak.Unity.MCP.Server.RemoteToolRunner | RemoteToolRunner Dispose. 
2025-06-03 22:24:03.7146 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport cleaning up for Server (stream) (com.IvanMurzak.Unity.MCP.Server) 
2025-06-03 22:24:03.7146 | DEBUG | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport waiting for read task for Server (stream) (com.IvanMurzak.Unity.MCP.Server) 
2025-06-03 22:24:03.7146 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport read task cleaned up for Server (stream) (com.IvanMurzak.Unity.MCP.Server) 
2025-06-03 22:24:03.7146 | INFO  | ModelContextProtocol.Protocol.Transport.StdioServerTransport | Transport cleaned up for Server (stream) (com.IvanMurzak.Unity.MCP.Server) 
